     warning: ExMCP.Transport.send_message/2 is undefined or private
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_call/3

     warning: the following clause will never match:

         {:noreply, new_state}

     because it attempts to match on the result of:

         process_request(request, state)

     which has type:

         dynamic({:notification, term()} or {:response, %{...}, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_info/2

     warning: the following clause will never match:

         {:error, reason, final_state}

     because it attempts to match on the result of:

         handle_tool_call(tool_name, arguments, new_state)

     which has type:

         dynamic({:ok, %{content: non_empty_list(%{text: binary(), type: binary()})}, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_call/3

     warning: the following clause will never match:

         {:ok, content, final_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, full_uri, new_state)

     which has type:

         dynamic({:error, :resource_not_found, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_call/3

     warning: the following clause will never match:

         {:ok, content, new_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, full_uri, state)

     which has type:

         dynamic({:error, :resource_not_found, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_call/3

     warning: the following clause will never match:

         {:ok, result, final_state}

     because it attempts to match on the result of:

         handle_prompt_get(prompt_name, arguments, new_state)

     which has type:

         dynamic({:error, :prompt_not_implemented, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_call/3

     warning: the following clause will never match:

         {:error, _reason, new_state}

     because it attempts to match on the result of:

         handle_request(method, params, state)

     which has type:

         dynamic({:noreply, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_cast/2

     warning: the following clause will never match:

         {:reply, _response, new_state}

     because it attempts to match on the result of:

         handle_request(method, params, state)

     which has type:

         dynamic({:noreply, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.handle_cast/2

     warning: the following clause will never match:

         {:error, reason, new_state}

     because it attempts to match on the result of:

         handle_tool_call(tool_name, arguments, state)

     which has type:

         dynamic({:ok, %{content: non_empty_list(%{text: binary(), type: binary()})}, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.process_request/2

     warning: the following clause will never match:

         {:ok, content, new_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, uri, state)

     which has type:

         dynamic({:error, :resource_not_found, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.process_request/2

     warning: the following clause will never match:

         {:ok, result, new_state}

     because it attempts to match on the result of:

         handle_initialize(params, state)

     which has type:

         dynamic({:error, :initialize_not_implemented, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.process_request/2

     warning: the following clause will never match:

         {:ok, result, new_state}

     because it attempts to match on the result of:

         handle_prompt_get(prompt_name, arguments, state)

     which has type:

         dynamic({:error, :prompt_not_implemented, term()})

     typing violation found at:
     │
 120 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/support/test_helpers.ex:120: ExMCP.TestHelpers.ApiTestServer.process_request/2

     warning: variable "operations" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 426 │   defp generate_recommendations(operations, summary) do
     │                                 ~~~~~~~~~~
     │
     └─ test/support/performance_profiler.ex:426:33: ExMCP.Testing.PerformanceProfiler.generate_recommendations/2


08:40:29.449 module=Horde.RegistryImpl function=init/1 file=lib/horde/registry_impl.ex line=65 [info] Starting Horde.RegistryImpl with name ExMCP.ServiceRegistry

08:40:29.454 module=Horde.DynamicSupervisorImpl function=init/1 file=lib/horde/dynamic_supervisor_impl.ex line=42 [info] Starting Horde.DynamicSupervisorImpl with name ExMCP.ServiceSupervisor

08:40:29.456 module=ExMCP.SessionManager function=init/1 file=lib/ex_mcp/session_manager.ex line=253 [info] SessionManager started with config: %{session_ttl_seconds: 3600, cleanup_interval_ms: 60000, max_events_per_session: 1000, storage_backend: :ets}

⚠️  Test tags excluded by default: [:integration, :external, :live_server, :slow, :performance, :stress, :wip, :skip, :requires_http, :requires_beam, :requires_bypass]
   Use --include <tag> to run specific test categories

Running ExUnit with seed: 172652, max_cases: 32
Excluding tags: [integration: true, external: true, live_server: true, slow: true, performance: true, stress: true, wip: true, skip: true, requires_http: true, requires_beam: true, requires_bypass: true]

    warning: variable "correct_challenge" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 77 │       correct_challenge = PKCE.generate_code_challenge(verifier)
    │       ~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/authorization/pkce_test.exs:77:7: ExMCP.Authorization.PKCETest."test validate_challenge/2 uses secure comparison to prevent timing attacks"/1

******    warning: unused alias Authorization
    │
 11 │   alias ExMCP.Compliance.Features.{
    │   ~
    │
    └─ test/ex_mcp/compliance/new_structure_test.exs:11:3

    warning: unused alias Prompts
    │
 11 │   alias ExMCP.Compliance.Features.{
    │   ~
    │
    └─ test/ex_mcp/compliance/new_structure_test.exs:11:3

    warning: unused alias Resources
    │
 11 │   alias ExMCP.Compliance.Features.{
    │   ~
    │
    └─ test/ex_mcp/compliance/new_structure_test.exs:11:3

    warning: unused alias Tools
    │
 11 │   alias ExMCP.Compliance.Features.{
    │   ~
    │
    └─ test/ex_mcp/compliance/new_structure_test.exs:11:3

    warning: unused alias Transport
    │
 11 │   alias ExMCP.Compliance.Features.{
    │   ~
    │
    └─ test/ex_mcp/compliance/new_structure_test.exs:11:3

.........    warning: module attribute @introspection_endpoint was set but never used
    │
 12 │   @introspection_endpoint "https://auth.example.com/introspect"
    │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/oauth_2_1_compliance_test.exs:12: ExMCP.Compliance.OAuth21ComplianceTest (module)

.......    warning: module attribute @issuer was set but never used
    │
  9 │   @issuer "https://auth.example.com"
    │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/oauth_2_1_compliance_test.exs:9: ExMCP.Compliance.OAuth21ComplianceTest (module)

.............................
08:40:30.310 module=ExMCP.Reliability.HealthCheck function=notify_status_change/3 file=lib/ex_mcp/reliability/health_check.ex line=363 [info] Health check test_checker: unknown -> healthy
......
08:40:30.335 module=ExMCP.Authorization.TokenManager function=schedule_refresh/2 file=lib/ex_mcp/authorization/token_manager.ex line=285 [debug] Scheduling token refresh in 6900 seconds
..     warning: this clause for init/1 cannot match because a previous clause at line 101 always matches
     │
 116 │     def init(_args), do: {:ok, %{name: "minimal-dsl"}}
     │         ~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:116:9


08:40:30.398 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.398 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected
     warning: this clause for handle_cast/2 cannot match because a previous clause at line 8 always matches
     │
 215 │     def handle_cast({:notify_resource_update, _uri}, state) do
     │         ~
     │
     └─ test/ex_mcp/server_test.exs:215:9


08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.414 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.415 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.415 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.415 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected

08:40:30.415 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: :not_connected


  1) test parameter validation accepts timeout option (ExMCP.ClientCompleteTest)
     test/ex_mcp/client_complete_test.exs:77
     match (=) failed
     code:  assert {:error, :not_connected} = Client.complete(client, ref, argument, timeout: 1000)
     left:  {:error, :not_connected}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport not connected",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/client_complete_test.exs:88: (test)

.

  2) test complete/3 basic functionality returns error when not connected (ExMCP.ClientCompleteTest)
     test/ex_mcp/client_complete_test.exs:27
     match (=) failed
     code:  assert {:error, :not_connected} = Client.complete(client, ref, argument)
     left:  {:error, :not_connected}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport not connected",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/client_complete_test.exs:37: (test)



  3) test parameter validation accepts valid ref types (ExMCP.ClientCompleteTest)
     test/ex_mcp/client_complete_test.exs:59
     match (=) failed
     code:  assert {:error, :not_connected} = Client.complete(client, prompt_ref, argument)
     left:  {:error, :not_connected}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport not connected",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/client_complete_test.exs:71: (test)

..................................................................................................................
08:40:30.468 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: {:connection_error, :not_connected}
.
08:40:30.468 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: {:connection_error, :not_connected}
...    warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 43 │             other ->
    │             ~
    │
    └─ test/ex_mcp/client/connection_manager_property_test.exs:43:13: ExMCP.Client.ConnectionManagerPropertyTest."property transport configuration property tests normalize_transport_spec handles all atom transport types"/1

    warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 64 │           other ->
    │           ~
    │
    └─ test/ex_mcp/client/connection_manager_property_test.exs:64:11: ExMCP.Client.ConnectionManagerPropertyTest."property transport configuration property tests normalize_transport_spec handles tuple transport specifications"/1

    warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 93 │           other ->
    │           ~
    │
    └─ test/ex_mcp/client/connection_manager_property_test.exs:93:11: ExMCP.Client.ConnectionManagerPropertyTest."property transport configuration property tests normalize_transport_spec handles keyword list transport specifications"/1

     warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 113 │           other ->
     │           ~
     │
     └─ test/ex_mcp/client/connection_manager_property_test.exs:113:11: ExMCP.Client.ConnectionManagerPropertyTest."property transport configuration property tests server_pid to server conversion works correctly"/1

.............     warning: this clause for handle_cast/2 cannot match because a previous clause at line 222 always matches
     │
 240 │     def handle_cast(_msg, state) do
     │         ~
     │
     └─ test/ex_mcp/server_test.exs:240:9

..
08:40:30.414 module=gen_server function=error_info/7 file=gen_server.erl line=2785 [error] GenServer #PID<0.672.0> terminating
** (FunctionClauseError) no function clause matching in anonymous fn/1 in ExMCP.Client.handle_call/3
    (ex_mcp 0.6.0) lib/ex_mcp/client.ex:740: anonymous fn({1, {#PID<0.671.0>, #Reference<0.3811111748.4026793993.255588>}}) in ExMCP.Client.handle_call/3
    (elixir 1.18.4) lib/enum.ex:992: anonymous fn/3 in Enum.each/2
    (stdlib 7.0.1) maps.erl:894: :maps.fold_1/4
    (elixir 1.18.4) lib/enum.ex:2558: Enum.each/2
    (ex_mcp 0.6.0) lib/ex_mcp/client.ex:740: ExMCP.Client.handle_call/3
    (stdlib 7.0.1) gen_server.erl:2470: :gen_server.try_handle_call/4
    (stdlib 7.0.1) gen_server.erl:2499: :gen_server.handle_msg/3
    (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3
Last message (from #PID<0.671.0>): :disconnect
State: %ExMCP.Client{transport_mod: ExMCP.Transport.Test, transport_state: %ExMCP.Transport.Test{peer_pid: #PID<0.671.0>, role: :client}, server_info: %{"name" => "test-server"}, transport_opts: nil, pending_requests: %{1 => {#PID<0.671.0>, #Reference<0.3811111748.4026793993.255588>}}, pending_batches: nil, receiver_task: nil, health_check_ref: nil, health_check_interval: 30000, connection_status: :connected, last_activity: 1751118030, reconnect_attempts: 0, client_info: %{"name" => "ExMCP", "version" => "0.8.0"}, raw_terms_enabled: nil, server_capabilities: nil, initialized: nil, default_retry_policy: nil, protocol_version: nil, default_timeout: nil}
Client #PID<0.671.0> is alive

    (stdlib 7.0.1) gen.erl:262: :gen.do_call/4
    (elixir 1.18.4) lib/gen_server.ex:1125: GenServer.call/3
    test/ex_mcp/client_disconnect_test.exs:104: ExMCP.ClientDisconnectTest."test disconnect/1 disconnect handles pending requests"/1
    (ex_unit 1.18.4) lib/ex_unit/runner.ex:511: ExUnit.Runner.exec_test/2
    (stdlib 7.0.1) timer.erl:599: :timer.tc/2
    (ex_unit 1.18.4) lib/ex_unit/runner.ex:433: anonymous fn/6 in ExUnit.Runner.spawn_test_monitor/4

08:40:30.519 module=ExMCP.Client.RequestHandler function=handle_cast_notification/3 file=lib/ex_mcp/client/request_handler.ex line=262 [error] Failed to send notification: {:connection_error, :not_connected}


  4) test disconnect/1 disconnect handles pending requests (ExMCP.ClientDisconnectTest)
     test/ex_mcp/client_disconnect_test.exs:70
     ** (EXIT from #PID<0.671.0>) an exception was raised:

          ** (FunctionClauseError) no function clause matching in anonymous fn/1 in ExMCP.Client.handle_call/3

          The following arguments were given to anonymous fn/1 in ExMCP.Client.handle_call/3:

              # 1
              {1, {#PID<0.671.0>, #Reference<0.3811111748.4026793993.255588>}}

          stacktrace:
            (ex_mcp 0.6.0) lib/ex_mcp/client.ex:740: anonymous fn/1 in ExMCP.Client.handle_call/3
            (elixir 1.18.4) lib/enum.ex:992: anonymous fn/3 in Enum.each/2
            (stdlib 7.0.1) maps.erl:894: :maps.fold_1/4
            (elixir 1.18.4) lib/enum.ex:2558: Enum.each/2
            (ex_mcp 0.6.0) lib/ex_mcp/client.ex:740: ExMCP.Client.handle_call/3
            (stdlib 7.0.1) gen_server.erl:2470: :gen_server.try_handle_call/4
            (stdlib 7.0.1) gen_server.erl:2499: :gen_server.handle_msg/3
            (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3




  5) test disconnect/1 requests fail after disconnect (ExMCP.ClientDisconnectTest)
     test/ex_mcp/client_disconnect_test.exs:161
     match (=) failed
     code:  assert {:error, :not_connected} = Client.list_tools(client)
     left:  {:error, :not_connected}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport not connected",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/client_disconnect_test.exs:195: (test)

........................
08:40:30.531 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session ExhlmW3cWnWKkukpoWhRuw with transport sse
............

  6) test integration patterns supports error handling testing (ExMCP.Testing.MockServerTest)
     test/ex_mcp/testing/mock_server_test.exs:382
     Expected truthy, got false
     code: assert Map.has_key?(result, "tools")
     arguments:

         # 1
         %ExMCP.Response{
           content: [],
           meta: nil,
           tool_name: nil,
           request_id: nil,
           server_info: nil,
           is_error: false,
           structuredOutput: nil,
           resourceLinks: nil,
           tools: [],
           resources: nil,
           prompts: nil,
           messages: nil,
           roots: nil,
           resourceTemplates: nil,
           nextCursor: nil,
           contents: nil,
           description: nil,
           completion: nil
         }

         # 2
         "tools"

     stacktrace:
       test/ex_mcp/testing/mock_server_test.exs:399: anonymous fn/1 in ExMCP.Testing.MockServerTest."test integration patterns supports error handling testing"/1
       (ex_mcp 0.6.0) lib/ex_mcp/testing/mock_server.ex:126: ExMCP.Testing.MockServer.with_server/2
       test/ex_mcp/testing/mock_server_test.exs:386: (test)

...............
08:40:30.558 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 1 attempts: :primary_failed
.
08:40:30.558 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 1 attempts: :secondary_failed
.
08:40:30.559 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: :permanent_failure, retrying in 12ms
.
08:40:30.562 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=47 [debug] Valid MCP-Protocol-Version: 2025-03-26
.
08:40:30.562 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=43 [debug] No MCP-Protocol-Version header found, using default: 2025-06-18

08:40:30.563 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=51 [warning] Invalid MCP-Protocol-Version: 2024-01-01
******.
08:40:30.571 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 2 failed: :permanent_failure, retrying in 16ms
....................................
08:40:30.578 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session ExhlmW3cWnWKkukpoWhRuw
...
08:40:30.588 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 3 attempts: :permanent_failure
.
08:40:30.588 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: {:throw, :test_throw}, retrying in 9ms
............
08:40:30.589 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session p5rp3bhWs0pnjUulefBXMg with transport sse
.
08:40:30.589 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session p5rp3bhWs0pnjUulefBXMg
.
08:40:30.589 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=47 [debug] Valid MCP-Protocol-Version: 2024-11-05
.
08:40:30.589 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=51 [warning] Invalid MCP-Protocol-Version: 
.
08:40:30.589 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session BHWemLqr4ueIkKp23d6HAQ with transport sse
.
08:40:30.589 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=47 [debug] Valid MCP-Protocol-Version: 2025-06-18
.
08:40:30.589 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=47 [debug] Valid MCP-Protocol-Version: 2025-06-18

08:40:30.589 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session BHWemLqr4ueIkKp23d6HAQ
.
08:40:30.589 module=ExMCP.Plugs.ProtocolVersion function=validate_protocol_version/1 file=lib/ex_mcp/plugs/protocol_version.ex line=47 [debug] Valid MCP-Protocol-Version: 2025-06-18
.
08:40:30.589 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session fgE_O8Cug5MCYdpabRPT6A with transport sse
.
08:40:30.590 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session fgE_O8Cug5MCYdpabRPT6A
.
08:40:30.590 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session 5yvPgGyGRY3RlIcCm8knoQ with transport sse
.
08:40:30.590 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session tcZyrtt5xY3I2J53u9WE7w with transport http
.
08:40:30.590 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session tcZyrtt5xY3I2J53u9WE7w
.
08:40:30.590 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session 5yvPgGyGRY3RlIcCm8knoQ
.
08:40:30.590 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session 5CtpaqE1drWf9UJYhBD9Ww with transport sse
.
08:40:30.590 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session 5CtpaqE1drWf9UJYhBD9Ww
....
08:40:30.598 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 2 attempts: {:throw, :test_throw}

08:40:30.598 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: %RuntimeError{message: "Test exception"}, retrying in 12ms

08:40:30.611 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 2 attempts: %RuntimeError{message: "Test exception"}

08:40:30.611 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: :retry_this, retrying in 11ms
     warning: variable "service_pid" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 207 │       service_pid: service_pid,
     │                    ~~~~~~~~~~~
     │
     └─ test/ex_mcp/client_beam_transport_test.exs:207:20: ExMCP.ClientBeamTransportTest."test Client with BEAM transport handles notifications via BEAM transport"/1


08:40:30.623 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=194 [info] Operation succeeded after 2 attempts

08:40:30.623 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=213 [debug] Error not retryable: :dont_retry_this

08:40:30.623 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: :temporary_failure, retrying in 12ms

08:40:30.636 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 2 failed: :temporary_failure, retrying in 22ms

08:40:30.659 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=194 [info] Operation succeeded after 3 attempts

08:40:30.660 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 1 attempts: :primary_failed

08:40:30.660 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 1 attempts: :secondary_failed

08:40:30.660 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: :test_error, retrying in 11ms

08:40:30.672 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 2 failed: :test_error, retrying in 21ms


  7) test event storage and messaging stores events when sending SSE responses (ExMCP.SessionManagementIntegrationTest)
     test/ex_mcp/session_management_integration_test.exs:118
     ** (FunctionClauseError) no function clause matching in ExMCP.SessionManagementIntegrationTest."test event storage and messaging stores events when sending SSE responses"/1

     The following arguments were given to ExMCP.SessionManagementIntegrationTest."test event storage and messaging stores events when sending SSE responses"/1:

         # 1
         %{async: true, line: 118, module: ExMCP.SessionManagementIntegrationTest, registered: %{}, file: "/Users/azmaveth/code/ex_mcp/test/ex_mcp/session_management_integration_test.exs", test: :"test event storage and messaging stores events when sending SSE responses", test_type: :test, test_pid: #PID<0.1210.0>, describe: "event storage and messaging", describe_line: 117, plug_opts: %{handler: #Function<1.49069623/1 in ExMCP.SessionManagementIntegrationTest.__ex_unit_setup_0/1>, auth_config: %{}, server_info: %{name: "test-server", version: "1.0.0"}, sse_enabled: true, session_manager: ExMCP.SessionManager, cors_enabled: false, oauth_enabled: false}}

     code: test "stores events when sending SSE responses", %{
     stacktrace:
       test/ex_mcp/session_management_integration_test.exs:118: (test)

.........................................
08:40:30.694 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 3 attempts: :test_error
.
08:40:30.694 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: :failure, retrying in 50ms
    warning: unused alias Server
    │
 12 │   alias ExMCP.{Client, Server}
    │   ~
    │
    └─ test/ex_mcp/integration/performance_profiling_test.exs:12:3

..........................................................
08:40:30.747 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 2 failed: :failure, retrying in 50ms
✅ Connection correctly succeeded
    warning: unused alias Server
    │
  4 │   alias ExMCP.{Client, Server}
    │   ~
    │
    └─ test/debug_version_negotiation_test.exs:4:3

.........
08:40:30.798 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 3 attempts: :failure
...
08:40:30.800 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: {:exit, :test_exit}, retrying in 12ms
..
08:40:30.812 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=210 [warning] Retry exhausted after 2 attempts: {:exit, :test_exit}
.
08:40:30.812 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: :temporary, retrying in 9ms
.
08:40:30.812 module=ExMCP.Reliability.HealthCheck function=notify_status_change/3 file=lib/ex_mcp/reliability/health_check.ex line=363 [info] Health check test_checker: unknown -> unhealthy
..
08:40:30.813 module=ExMCP.Client.ConnectionManager function=parse_handshake_response/2 file=lib/ex_mcp/client/connection_manager.ex line=336 [debug] Handshake error details: %{"code" => -32000, "message" => "Unsupported protocol version: 2025-06-18"}

08:40:30.814 module=ExMCP.Client function=init/1 file=lib/ex_mcp/client.ex line=675 [error] Failed to initialize MCP client: "Handshake failed: Unsupported protocol version: 2025-06-18"
✅ Connection correctly failed with version negotiation error
.
08:40:30.822 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=194 [info] Operation succeeded after 2 attempts

08:40:30.822 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=203 [debug] Attempt 1 failed: :temporary, retrying in 10ms
..
08:40:30.833 module=ExMCP.Reliability.Retry function=execute_with_retry/4 file=lib/ex_mcp/reliability/retry.ex line=194 [info] Operation succeeded after 2 attempts
...
08:40:30.863 module=ExMCP.Reliability.HealthCheck function=notify_status_change/3 file=lib/ex_mcp/reliability/health_check.ex line=363 [info] Health check test_checker: unknown -> healthy
.
08:40:30.864 module=ExMCP.Reliability.HealthCheck function=notify_status_change/3 file=lib/ex_mcp/reliability/health_check.ex line=363 [info] Health check test_checker: unknown -> healthy
.
08:40:30.864 module=ExMCP.Reliability.HealthCheck function=notify_status_change/3 file=lib/ex_mcp/reliability/health_check.ex line=363 [info] Health check test_checker: healthy -> unhealthy
.
08:40:30.864 module=ExMCP.Reliability.HealthCheck function=notify_status_change/3 file=lib/ex_mcp/reliability/health_check.ex line=363 [info] Health check test_checker: unknown -> healthy
.
08:40:30.899 module=ExMCP.Server.Transport function=start_native_server/4 file=lib/ex_mcp/server/transport.ex line=153 [info] Starting MCP native server: Elixir.ExMCP.Server.TransportTest.TestServer

08:40:30.899 module=ExMCP.Server.Transport function=start_native_server/4 file=lib/ex_mcp/server/transport.ex line=158 [info] MCP native server started successfully
............
08:40:30.932 module=ExMCP.Transport.ReliabilityWrapper function=execute_wrapped_operation/3 file=lib/ex_mcp/transport/reliability_wrapper.ex line=308 [debug] Transport operation failed
.
08:40:30.932 module=ExMCP.Transport.ReliabilityWrapper function=execute_wrapped_operation/3 file=lib/ex_mcp/transport/reliability_wrapper.ex line=308 [debug] Transport operation failed
...
08:40:30.941 module=ExMCP.ProgressTracker function=send_progress_notification/1 token=dead_test file=lib/ex_mcp/progress_tracker.ex line=323 [warning] Progress notification sender process is dead

08:40:30.948 module=ExMCP.SessionManager function=init/1 file=lib/ex_mcp/session_manager.ex line=253 [info] SessionManager started with config: %{session_ttl_seconds: 1, cleanup_interval_ms: 100, max_events_per_session: 100, storage_backend: :ets}
.
08:40:30.948 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session DMiwB4Wv0N4C_pLa1-27XA with transport sse
.
08:40:30.948 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=346 [debug] Terminated session DMiwB4Wv0N4C_pLa1-27XA
.
08:40:30.948 module=ExMCP.SessionManager function=init/1 file=lib/ex_mcp/session_manager.ex line=253 [info] SessionManager started with config: %{session_ttl_seconds: 1, cleanup_interval_ms: 100, max_events_per_session: 100, storage_backend: :ets}
.
08:40:30.948 module=ExMCP.SessionManager function=init/1 file=lib/ex_mcp/session_manager.ex line=253 [info] SessionManager started with config: %{session_ttl_seconds: 1, cleanup_interval_ms: 100, max_events_per_session: 100, storage_backend: :ets}

08:40:30.948 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session x6k37QL9bTbT91t3R6cTWg with transport sse

08:40:30.950 module=ExMCP.SessionManager function=init/1 file=lib/ex_mcp/session_manager.ex line=253 [info] SessionManager started with config: %{session_ttl_seconds: 1, cleanup_interval_ms: 100, max_events_per_session: 100, storage_backend: :ets}

08:40:30.950 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session S25uAaxSTxikH4mtxJ79AA with transport sse

08:40:30.950 module=ExMCP.SessionManager function=init/1 file=lib/ex_mcp/session_manager.ex line=253 [info] SessionManager started with config: %{session_ttl_seconds: 1, cleanup_interval_ms: 100, max_events_per_session: 100, storage_backend: :ets}

08:40:30.950 module=ExMCP.SessionManager function=init/1 file=lib/ex_mcp/session_manager.ex line=253 [info] SessionManager started with config: %{session_ttl_seconds: 0, cleanup_interval_ms: 50, max_events_per_session: 1000, storage_backend: :ets}

08:40:30.950 module=ExMCP.SessionManager function=handle_call/3 file=lib/ex_mcp/session_manager.ex line=274 [debug] Created session xeR8mnOIORFeAH52y4Vz-A with transport sse
...........
08:40:30.970 module=ExMCP.Server.Legacy function=process_mcp_request/2 file=lib/ex_mcp/server/legacy.ex line=616 [debug] Tracking pending request 73 for tools/call
........    warning: unused alias ConsentCache
    │
 18 │   alias ExMCP.Internal.ConsentCache
    │   ~
    │
    └─ test/ex_mcp/transport/security_integration_test.exs:18:3


08:40:31.001 module=ExMCP.SessionManager function=cleanup_expired_sessions/1 file=lib/ex_mcp/session_manager.ex line=535 [debug] Cleaning up expired session xeR8mnOIORFeAH52y4Vz-A

08:40:31.001 module=ExMCP.SessionManager function=cleanup_expired_sessions/1 file=lib/ex_mcp/session_manager.ex line=545 [info] Cleaned up 1 expired sessions
........................................................................................................................................................................

  8) test notification handling handles server notifications (ExMCP.ClientMainTest)
     test/ex_mcp/client_main_test.exs:681
     Assertion with =~ failed
     code:  assert log =~ "Received notification: resources/updated"
     left:  ""
     right: "Received notification: resources/updated"
     stacktrace:
       test/ex_mcp/client_main_test.exs:695: (test)

........................................

  9) test server to client ping server ping fails when client doesn't have handler (ExMCP.PingTest)
     test/ex_mcp/ping_test.exs:178
     match (=) failed
     code:  assert {:error, %{"code" => -32601}} = Server.ping(server)
     left:  {:error, %{"code" => -32601}}
     right: {:ok, %{}}
     stacktrace:
       test/ex_mcp/ping_test.exs:196: (test)



 10) test ping error handling ping handles transport failures gracefully (ExMCP.PingTest)
     test/ex_mcp/ping_test.exs:241
     ** (EXIT from #PID<0.2431.0>) {:transport_connect_failed, {:connection_error, :server_not_available}}

.

 11) test tools functionality tool handles optional parameters with defaults (ExMCP.ToolsTest)
     test/ex_mcp/tools_test.exs:381
     ** (exit) exited in: GenServer.stop(#PID<0.2126.0>, :normal, :infinity)
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/tools_test.exs:282: anonymous fn/2 in ExMCP.ToolsTest.__ex_unit_setup_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 12) test start_link/1 fails when transport connection fails (ExMCP.ClientMainTest)
     test/ex_mcp/client_main_test.exs:249
     Assertion with =~ failed
     code:  assert capture_log(fn ->
              assert {:error, {:transport_connect_failed, :connection_refused}} = Client.start_link(opts)
            end) =~ "Failed to initialize MCP client"
     left:  ""
     right: "Failed to initialize MCP client"
     stacktrace:
       test/ex_mcp/client_main_test.exs:253: (test)

.......

 13) test start_link/1 fails when initialize returns error (ExMCP.ClientMainTest)
     test/ex_mcp/client_main_test.exs:265
     Assertion with =~ failed
     code:  assert capture_log(fn -> assert {:error, {:initialize_error, _}} = Client.start_link(opts) end) =~
              "Failed to initialize MCP client"
     left:  ""
     right: "Failed to initialize MCP client"
     stacktrace:
       test/ex_mcp/client_main_test.exs:269: (test)

.........................

 14) test error handling handles invalid messages gracefully (ExMCP.ClientMainTest)
     test/ex_mcp/client_main_test.exs:705
     Assertion with =~ failed
     code:  assert log =~ "Failed to parse transport message"
     left:  ""
     right: "Failed to parse transport message"
     stacktrace:
       test/ex_mcp/client_main_test.exs:713: (test)

.............................

 15) test resource/3 creates resource with metadata (ExMCP.Testing.BuildersTest)
     test/ex_mcp/testing/builders_test.exs:242
     Assertion with == failed
     code:  assert resource["mime_type"] == "application/json"
     left:  nil
     right: "application/json"
     stacktrace:
       test/ex_mcp/testing/builders_test.exs:250: (test)

..................................    warning: module attribute @medium_op_threshold_ms was set but never used
    │
 30 │   @medium_op_threshold_ms 50
    │   ~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/performance/phase_4d_benchmarks_test.exs:30: ExMCP.Performance.Phase4DBenchmarksTest (module)

...............................................     warning: variable "small" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 346 │       [tiny, small, medium, large, xlarge] = Enum.map(payload_results, & &1.execution_time_ms)
     │              ~~~~~
     │
     └─ test/ex_mcp/integration/performance_test.exs:346:14: ExMCP.Integration.PerformanceTest."test payload size performance analyzes performance across different payload sizes"/1

...................    warning: unused alias Server
    │
  7 │   alias ExMCP.Server
    │   ~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:7:3

.................................................................................    warning: unused alias Server
    │
 12 │   alias ExMCP.{Client, Server}
    │   ~
    │
    └─ test/ex_mcp/integration/cross_transport_test.exs:12:3

    warning: unused alias ConsentCache
    │
 12 │   alias ExMCP.Internal.ConsentCache
    │   ~
    │
    └─ test/ex_mcp/compliance/security_compliance_test.exs:12:3

.......................................................................................................................................................................

 16) test structured tool output tool can return structured content (ExMCP.StructuredOutputTest)
     test/ex_mcp/structured_output_test.exs:173
     ** (exit) exited in: GenServer.stop(#PID<0.3660.0>, :normal, :infinity)
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/structured_output_test.exs:152: anonymous fn/2 in ExMCP.StructuredOutputTest.__ex_unit_setup_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

.........................................................................................................

 17) test tool execution errors with isError flag division by zero returns isError: true (ExMCP.ToolErrorTest)
     test/ex_mcp/tool_error_test.exs:187
     Assertion with == failed
     code:  assert result == %{
              "content" => %{
                "content" => [%{"type" => "text", "text" => "Division by zero error: Cannot divide 10 by 0"}],
                "isError" => true
              }
            }
     left:  %{
              "content" => [
                %{
                  "text" => "Division by zero error: Cannot divide 10 by 0",
                  "type" => "text"
                }
              ],
              "isError" => true
            }
     right: %{
              "content" => %{
                "content" => [
                  %{
                    "text" => "Division by zero error: Cannot divide 10 by 0",
                    "type" => "text"
                  }
                ],
                "isError" => true
              }
            }
     stacktrace:
       test/ex_mcp/tool_error_test.exs:191: (test)

..    warning: unused alias MockServer
    │
 13 │   alias ExMCP.Testing.{Assertions, MockServer}
    │   ~
    │
    └─ test/ex_mcp/integration/e2e_scenarios_test.exs:13:3

    warning: unused alias Server
    │
 12 │   alias ExMCP.{Client, Server}
    │   ~
    │
    └─ test/ex_mcp/integration/e2e_scenarios_test.exs:12:3

    warning: unused import ExMCP.Testing.Assertions
    │
 19 │   import Assertions
    │   ~
    │
    └─ test/ex_mcp/integration/e2e_scenarios_test.exs:19:3

.....................     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 141 │         def send_message(_msg, %{failure_mode: true} = state) do
     │                                                        ~~~~~
     │
     └─ test/ex_mcp/reliability_integration_test.exs:141:56: ExMCP.ReliabilityIntegrationTest.DegradingTransport.send_message/2

     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 147 │         def receive_message(%{failure_mode: true} = state), do: {:error, :connection_error}
     │                                                     ~~~~~
     │
     └─ test/ex_mcp/reliability_integration_test.exs:147:53: ExMCP.ReliabilityIntegrationTest.DegradingTransport.receive_message/1

...Operating System: macOS
CPU Information: Apple M4 Max
Number of Available Cores: 16
Available memory: 128 GB
Elixir 1.18.4
Erlang 28.0.1
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 1 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 3 s

Benchmarking security_guard_check ...
..     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 250 │         def send_message(_msg, %{should_fail: true} = state) do
     │                                                       ~~~~~
     │
     └─ test/ex_mcp/reliability/health_monitoring_test.exs:250:55: ExMCP.Reliability.HealthMonitoringTest.ControllableTransport.send_message/2

.

 18) test tool execution errors with isError flag successful API call returns result without isError (ExMCP.ToolErrorTest)
     test/ex_mcp/tool_error_test.exs:219
     Assertion with == failed
     code:  assert result == %{
              "content" => %{
                "content" => [%{"type" => "text", "text" => "Data from /api/status: {\"status\": \"ok\"}"}]
              }
            }
     left:  %{
              "content" => [
                %{
                  "text" => "Data from /api/status: {\"status\": \"ok\"}",
                  "type" => "text"
                }
              ]
            }
     right: %{
              "content" => %{
                "content" => [
                  %{
                    "text" => "Data from /api/status: {\"status\": \"ok\"}",
                    "type" => "text"
                  }
                ]
              }
            }
     stacktrace:
       test/ex_mcp/tool_error_test.exs:223: (test)

...............    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 46 │         def send_message(_msg, state), do: {:error, :transport_failure}
    │                                ~~~~~
    │
    └─ test/ex_mcp/reliability_integration_test.exs:46:32: ExMCP.ReliabilityIntegrationTest.FailingTestTransport.send_message/2

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 47 │         def receive_message(state), do: {:error, :transport_failure}
    │                             ~~~~~
    │
    └─ test/ex_mcp/reliability_integration_test.exs:47:29: ExMCP.ReliabilityIntegrationTest.FailingTestTransport.receive_message/1

.

 19) test roots basic functionality server can use list_roots API (ExMCP.RootsSimpleTest)
     test/ex_mcp/roots_simple_test.exs:92
     Assertion with == failed
     code:  assert hd(received_roots)["uri"] == "file:///test"
     left:  "file:///shared"
     right: "file:///test"
     stacktrace:
       test/ex_mcp/roots_simple_test.exs:119: (test)

.......     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 202 │         def send_message(_msg, %{attempts: attempts} = state) when attempts < 2 do
     │                                                        ~~~~~
     │
     └─ test/ex_mcp/reliability_integration_test.exs:202:56: ExMCP.ReliabilityIntegrationTest.RecoveringTransport.send_message/2

..........................................................

 20) test tool execution errors with isError flag successful tool call returns result without isError (ExMCP.ToolErrorTest)
     test/ex_mcp/tool_error_test.exs:175
     ** (BadMapError) expected a map, got: [%{"text" => "Result: 5.0", "type" => "text"}]
     code: refute Map.has_key?(result["content"], "isError")
     stacktrace:
       (erts 16.0.1) :erlang.is_map_key("isError", [%{"text" => "Result: 5.0", "type" => "text"}])
       test/ex_mcp/tool_error_test.exs:184: (test)

...     warning: comparison between distinct types found:

         retry_policy == :use_default

     given types:

         non_empty_list({:max_attempts, integer()}) == :use_default

     where "retry_policy" was given the type:

         # type: non_empty_list({:max_attempts, integer()})
         # from: test/ex_mcp/client_retry_test.exs:130:20
         retry_policy = [max_attempts: 3]

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 134 │         if retry_policy == :use_default do
     │                         ~
     │
     └─ test/ex_mcp/client_retry_test.exs:134:25: ExMCP.ClientRetryTest."test integration with make_request make_request handles retry policy merging correctly"/1

     warning: the following clause will never match:

         false

     because it attempts to match on the result of:

         retry_policy

     which has type:

         non_empty_list({:max_attempts, integer()})

     typing violation found at:
     │
 138 │             false -> []
     │             ~~~~~~~~~~~
     │
     └─ test/ex_mcp/client_retry_test.exs:138: ExMCP.ClientRetryTest."test integration with make_request make_request handles retry policy merging correctly"/1

     warning: the following clause will never match:

         []

     because it attempts to match on the result of:

         retry_policy

     which has type:

         non_empty_list({:max_attempts, integer()})

     typing violation found at:
     │
 139 │             [] -> []
     │             ~~~~~~~~
     │
     └─ test/ex_mcp/client_retry_test.exs:139: ExMCP.ClientRetryTest."test integration with make_request make_request handles retry policy merging correctly"/1

    warning: function handle_call_tool/3 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.Compliance.StructuredOutputComplianceTest.TestServer)
    │
 17 │   defmodule TestServer do
    │   ~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/structured_output_compliance_test.exs:17: ExMCP.Compliance.StructuredOutputComplianceTest.TestServer (module)



 21) test Race Conditions and Timing handles cancellation arriving after completion (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:482
     ** (EXIT from #PID<0.4049.0>) an exception was raised:

          ** (FunctionClauseError) no function clause matching in ExMCP.Server.Legacy.handle_info/2

          The following arguments were given to ExMCP.Server.Legacy.handle_info/2:

              # 1
              {:cancelled, "possibly_completed"}

              # 2
              %{handler_state: %{cancelled_requests: MapSet.new(["possibly_completed"]), active_requests: %{}}, protocol_version: nil, transport: ExMCP.Transport.Test, transport_state: %ExMCP.Transport.Test{peer_pid: #PID<0.4052.0>, role: :server}, pending_requests: %{}, cancelled_requests: MapSet.new(["possibly_completed"]), handler_module: ExMCP.CancellationComprehensiveTest.SlowHandler}

          Attempted function clauses (showing 5 out of 5):

              def handle_info(-:start_message_loop-, state)
              def handle_info(-{:transport_message, message}-, state)
              def handle_info(-{:transport_error, reason}-, state)
              def handle_info(-{:test_transport_connect, client_pid}-, state)
              def handle_info(-{:transport_closed}-, state)

          stacktrace:
            (ex_mcp 0.6.0) lib/ex_mcp/server/legacy.ex:121: ExMCP.Server.Legacy.handle_info/2
            (stdlib 7.0.1) gen_server.erl:2434: :gen_server.try_handle_info/3
            (stdlib 7.0.1) gen_server.erl:2420: :gen_server.handle_msg/3
            (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3


...    warning: function handle_initialize/2 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.Compliance.StructuredOutputComplianceTest.TestServer)
    │
 17 │   defmodule TestServer do
    │   ~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/structured_output_compliance_test.exs:17: ExMCP.Compliance.StructuredOutputComplianceTest.TestServer (module)

.    warning: got "@impl ExMCP.Server.Handler" for function handle_call_tool/2 but this behaviour does not specify such callback. The known callbacks are:

      * ExMCP.Server.Handler.handle_call_tool/3 (function)
      * ExMCP.Server.Handler.handle_complete/3 (function)
      * ExMCP.Server.Handler.handle_create_message/2 (function)
      * ExMCP.Server.Handler.handle_get_prompt/3 (function)
      * ExMCP.Server.Handler.handle_initialize/2 (function)
      * ExMCP.Server.Handler.handle_list_prompts/2 (function)
      * ExMCP.Server.Handler.handle_list_resource_templates/2 (function)
      * ExMCP.Server.Handler.handle_list_resources/2 (function)
      * ExMCP.Server.Handler.handle_list_roots/1 (function)
      * ExMCP.Server.Handler.handle_list_tools/2 (function)
      * ExMCP.Server.Handler.handle_read_resource/2 (function)
      * ExMCP.Server.Handler.handle_set_log_level/2 (function)
      * ExMCP.Server.Handler.handle_subscribe_resource/2 (function)
      * ExMCP.Server.Handler.handle_unsubscribe_resource/2 (function)
      * ExMCP.Server.Handler.init/1 (function)
      * ExMCP.Server.Handler.terminate/2 (function)

    │
 17 │   defmodule TestServer do
    │   ~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/structured_output_compliance_test.exs:17: ExMCP.Compliance.StructuredOutputComplianceTest.TestServer (module)

...     warning: function handle_call_tool/3 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.Performance.SchemaCompilationPerformanceTest.TestPerformanceServer)
     │
 124 │     defmodule TestPerformanceServer do
     │     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/performance/schema_compilation_performance_test.exs:124: ExMCP.Performance.SchemaCompilationPerformanceTest.TestPerformanceServer (module)

     warning: function handle_initialize/2 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.Performance.SchemaCompilationPerformanceTest.TestPerformanceServer)
     │
 124 │     defmodule TestPerformanceServer do
     │     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/performance/schema_compilation_performance_test.exs:124: ExMCP.Performance.SchemaCompilationPerformanceTest.TestPerformanceServer (module)

     warning: got "@impl ExMCP.Server.Handler" for function handle_call_tool/2 but this behaviour does not specify such callback. The known callbacks are:

       * ExMCP.Server.Handler.handle_call_tool/3 (function)
       * ExMCP.Server.Handler.handle_complete/3 (function)
       * ExMCP.Server.Handler.handle_create_message/2 (function)
       * ExMCP.Server.Handler.handle_get_prompt/3 (function)
       * ExMCP.Server.Handler.handle_initialize/2 (function)
       * ExMCP.Server.Handler.handle_list_prompts/2 (function)
       * ExMCP.Server.Handler.handle_list_resource_templates/2 (function)
       * ExMCP.Server.Handler.handle_list_resources/2 (function)
       * ExMCP.Server.Handler.handle_list_roots/1 (function)
       * ExMCP.Server.Handler.handle_list_tools/2 (function)
       * ExMCP.Server.Handler.handle_read_resource/2 (function)
       * ExMCP.Server.Handler.handle_set_log_level/2 (function)
       * ExMCP.Server.Handler.handle_subscribe_resource/2 (function)
       * ExMCP.Server.Handler.handle_unsubscribe_resource/2 (function)
       * ExMCP.Server.Handler.init/1 (function)
       * ExMCP.Server.Handler.terminate/2 (function)

     │
 124 │     defmodule TestPerformanceServer do
     │     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/performance/schema_compilation_performance_test.exs:124: ExMCP.Performance.SchemaCompilationPerformanceTest.TestPerformanceServer (module)

    warning: function handle_call_tool/3 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.Server.StructuredOutputTest.TestServer)
    │
  9 │   defmodule TestServer do
    │   ~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/structured_output_test.exs:9: ExMCP.Server.StructuredOutputTest.TestServer (module)

    warning: function handle_initialize/2 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.Server.StructuredOutputTest.TestServer)
    │
  9 │   defmodule TestServer do
    │   ~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/structured_output_test.exs:9: ExMCP.Server.StructuredOutputTest.TestServer (module)

    warning: got "@impl ExMCP.Server.Handler" for function handle_call_tool/2 but this behaviour does not specify such callback. The known callbacks are:

      * ExMCP.Server.Handler.handle_call_tool/3 (function)
      * ExMCP.Server.Handler.handle_complete/3 (function)
      * ExMCP.Server.Handler.handle_create_message/2 (function)
      * ExMCP.Server.Handler.handle_get_prompt/3 (function)
      * ExMCP.Server.Handler.handle_initialize/2 (function)
      * ExMCP.Server.Handler.handle_list_prompts/2 (function)
      * ExMCP.Server.Handler.handle_list_resource_templates/2 (function)
      * ExMCP.Server.Handler.handle_list_resources/2 (function)
      * ExMCP.Server.Handler.handle_list_roots/1 (function)
      * ExMCP.Server.Handler.handle_list_tools/2 (function)
      * ExMCP.Server.Handler.handle_read_resource/2 (function)
      * ExMCP.Server.Handler.handle_set_log_level/2 (function)
      * ExMCP.Server.Handler.handle_subscribe_resource/2 (function)
      * ExMCP.Server.Handler.handle_unsubscribe_resource/2 (function)
      * ExMCP.Server.Handler.init/1 (function)
      * ExMCP.Server.Handler.terminate/2 (function)

    │
  9 │   defmodule TestServer do
    │   ~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/structured_output_test.exs:9: ExMCP.Server.StructuredOutputTest.TestServer (module)

.    warning: conflicting behaviours found. Callback function init/1 is defined by both GenServer and ExMCP.Server.Handler (in module ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler)
    │
  1 │ defmodule ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler do
    │ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/concurrent_clients_test.exs:1: ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler (module)

     warning: conflicting behaviours found. Callback function init/1 is defined by both GenServer and ExMCP.Server.Handler (in module ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler)
     │
 154 │ defmodule ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler do
     │ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:154: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

    warning: conflicting behaviours found. Callback function terminate/2 is defined by both GenServer and ExMCP.Server.Handler (in module ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler)
    │
  1 │ defmodule ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler do
    │ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/concurrent_clients_test.exs:1: ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler (module)

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_initialize(params, state)

    which has type:

        dynamic(
          {:ok,
           %{
             capabilities: %{prompts: empty_map(), resources: empty_map(), tools: empty_map()},
             name: binary(),
             version: binary()
           }, term()}
        )

    typing violation found at:
    │
 20 │       {:error, reason, new_state} -> {:reply, {:error, reason, new_state}, new_state}
    │       ~
    │
    └─ test/ex_mcp/integration/concurrent_clients_test.exs:20:7: ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler.handle_call/3

     warning: conflicting behaviours found. Callback function terminate/2 is defined by both GenServer and ExMCP.Server.Handler (in module ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler)
     │
 154 │ defmodule ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler do
     │ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:154: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_list_tools(cursor, state)

    which has type:

        dynamic(
          {:ok,
           non_empty_list(%{
             description: binary(),
             input_schema:
               %{
                 properties: %{duration: %{description: binary(), type: binary()}},
                 required: non_empty_list(binary()),
                 type: binary()
               } or %{properties: empty_map(), required: empty_list(), type: binary()},
             name: binary()
           }), nil, term()}
        )

    typing violation found at:
    │
 29 │       {:error, reason, new_state} ->
    │       ~
    │
    └─ test/ex_mcp/integration/concurrent_clients_test.exs:29:7: ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler.handle_call/3

    warning: module attribute @impl was not set for function handle_list_tools/2 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
    │
 76 │   def handle_list_tools(_cursor, state) do
    │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/concurrent_clients_test.exs:76: ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler (module)

     warning: the following clause will never match:

         {:error, reason, new_state}

     because it attempts to match on the result of:

         handle_initialize(params, state)

     which has type:

         dynamic({:ok, %{capabilities: %{tools: empty_map()}, name: binary(), version: binary()}, term()})

     typing violation found at:
     │
 173 │       {:error, reason, new_state} -> {:reply, {:error, reason, new_state}, new_state}
     │       ~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:173:7: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler.handle_call/3

     warning: module attribute @impl was not set for function handle_call_tool/3 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
     │
 103 │   def handle_call_tool("slow_operation", %{"duration" => duration}, state) do
     │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:103: ExMCP.Integration.ConcurrentClientsTest.TestConcurrentHandler (module)

     warning: the following clause will never match:

         {:error, reason, new_state}

     because it attempts to match on the result of:

         handle_list_tools(cursor, state)

     which has type:

         dynamic(
           {:ok,
            non_empty_list(%{
              description: binary(),
              input_schema: %{properties: empty_map(), type: binary()},
              name: binary()
            }), nil, term()}
         )

     typing violation found at:
     │
 182 │       {:error, reason, new_state} ->
     │       ~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:182:7: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler.handle_call/3

     warning: module attribute @impl was not set for function handle_list_tools/2 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
     │
 223 │   def handle_list_tools(_cursor, state) do
     │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:223: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

.    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_call/3

    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_call/3

.    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_call/3

    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_info/2

    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:unknown_method, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_cast/2

    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_info/2

     warning: module attribute @impl was not set for function handle_call_tool/3 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
     │
 234 │   def handle_call_tool("unreliable", _params, state) do
     │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:234: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{messages: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_call/3

    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_info/2

     warning: ExMCP.Server.notify_progress/5 is undefined or private. Did you mean:

           * notify_progress/4

     │
 205 │             Server.notify_progress(self(), token, i, 5, "Generating chunk #{i}")
     │                    ~
     │
     └─ test/ex_mcp/progress_meta_comprehensive_test.exs:205:20: ExMCP.ProgressMetaComprehensiveTest.ComprehensiveHandler.handle_complete/3
     └─ test/ex_mcp/progress_meta_comprehensive_test.exs:268:20: ExMCP.ProgressMetaComprehensiveTest.ComprehensiveHandler.handle_progress_tool/3
     └─ test/ex_mcp/progress_meta_comprehensive_test.exs:306:18: ExMCP.ProgressMetaComprehensiveTest.ComprehensiveHandler.send_progress_updates/2

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:ok, non_empty_list(%{...}), term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:ok, content, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_call/3

    warning: the following clause will never match:

        {:ok, content, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_call/3

     warning: module attribute @impl was not set for function handle_list_resources/2 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
     │
 250 │   def handle_list_resources(_cursor, state), do: {:ok, [], nil, state}
     │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:250: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:ok, non_empty_list(%{...}), term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_call/3

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_call/3

..    warning: the following clause will never match:

        {:ok, result, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_call/3

..    warning: the following clause will never match:

        {:error, _reason, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_cast/2

    warning: the following clause will never match:

        {:ok, result, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:error, _reason, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_cast/2

    warning: the following clause will never match:

        {:reply, _response, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.handle_cast/2

    warning: the following clause will never match:

        {:error, _reason, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:unknown_method, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_cast/2

    warning: the following clause will never match:

        {:reply, _response, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.handle_cast/2

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:ok, %{messages: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.process_request/2

    warning: the following clause will never match:

        {:reply, _response, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:unknown_method, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.handle_cast/2

     warning: module attribute @impl was not set for function handle_read_resource/2 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
     │
 251 │   def handle_read_resource(_uri, state), do: {:error, "Not found", state}
     │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:251: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.process_request/2

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:ok, non_empty_list(%{...}), term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.process_request/2

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.process_request/2

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.process_request/2

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
 14 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/compliance/transport_version_test.exs:14: ExMCP.Compliance.TransportVersionTest.VersionTestServer.process_request/2

     warning: module attribute @impl was not set for function handle_list_prompts/2 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
     │
 252 │   def handle_list_prompts(_cursor, state), do: {:ok, [], nil, state}
     │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:252: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_initialize(params, state)

    which has type:

        dynamic({:error, :initialize_not_implemented, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/dsl/compliance_test.exs:6: ExMCP.DSL.ComplianceTest.DesignCompliantServer.process_request/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_initialize(params, state)

    which has type:

        dynamic({:error, :initialize_not_implemented, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.process_request/2



    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
  9 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/http_plug_test.exs:9: ExMCP.HttpPlugTest.TestServer.process_request/2

 22) test recovery scenarios circuit breaker recovery after reset timeout (ExMCP.ReliabilityIntegrationTest)
     test/ex_mcp/reliability_integration_test.exs:195
     match (=) failed
     code:  assert {:ok, _} = ReliabilityWrapper.send_message("test4", wrapped_state)
     left:  {:ok, _}
     right: {:error, :temporary_failure}
     stacktrace:
       test/ex_mcp/reliability_integration_test.exs:239: (test)

..     warning: got "@impl true" for function handle_log/4 but no behaviour specifies such callback. The known callbacks are:

       * ExMCP.Client.Handler.handle_create_message/2 (function)
       * ExMCP.Client.Handler.handle_elicitation_create/3 (function)
       * ExMCP.Client.Handler.handle_list_roots/1 (function)
       * ExMCP.Client.Handler.handle_ping/1 (function)
       * ExMCP.Client.Handler.init/1 (function)
       * ExMCP.Client.Handler.terminate/2 (function)

     │
 250 │     def handle_log(level, message, data, state) do
     │     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/compliance/logging_compliance_test.exs:250: ExMCP.LoggingComplianceTest.TestLoggingClient (module)

.     warning: module attribute @impl was not set for function handle_get_prompt/3 callback (specified in ExMCP.Server.Handler). This either means you forgot to add the "@impl true" annotation before the definition or that you are accidentally overriding this callback
     │
 253 │   def handle_get_prompt(_name, _params, state), do: {:error, "Not found", state}
     │   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/integration/concurrent_clients_test.exs:253: ExMCP.Integration.ConcurrentClientsTest.ErrorProneHandler (module)

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{...}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{...})
         # from: test/ex_mcp/integration/full_workflow_test.exs:262
         left = fetch_result

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/integration/full_workflow_test.exs:262
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 262 │         assert fetch_result != nil
     │                             ~
     │
     └─ test/ex_mcp/integration/full_workflow_test.exs:262:29: ExMCP.Integration.FullWorkflowTest."test complex interaction scenarios chained tool execution workflow"/1

     warning: the following pattern will never match:

         result = raise RuntimeError.exception("test error")

     because the right-hand side has type:

         none()

     typing violation found at:
     │
 108 │         measure do
     │         ~~~~~~~~~~
     │
     └─ test/ex_mcp/helpers_test.exs:108: ExMCP.HelpersTest."test measure macro preserves return value on exception"/1

     warning: function resource_exists?/2 is private, @impl attribute is always discarded for private functions/macros
     │
 170 │     defp resource_exists?(uri, state) do
     │     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/compliance/resources_compliance_test.exs:170: ExMCP.ResourcesComplianceTest.TestResourcesServer (module)

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{...}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{...})
         # from: test/ex_mcp/integration/full_workflow_test.exs:263
         left = process_result

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/integration/full_workflow_test.exs:263
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 263 │         assert process_result != nil
     │                               ~
     │
     └─ test/ex_mcp/integration/full_workflow_test.exs:263:31: ExMCP.Integration.FullWorkflowTest."test complex interaction scenarios chained tool execution workflow"/1

...     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{...}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{...})
         # from: test/ex_mcp/integration/full_workflow_test.exs:264
         left = final_result

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/integration/full_workflow_test.exs:264
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 264 │         assert final_result != nil
     │                             ~
     │
     └─ test/ex_mcp/integration/full_workflow_test.exs:264:29: ExMCP.Integration.FullWorkflowTest."test complex interaction scenarios chained tool execution workflow"/1

    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_call/3

    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_call/3

..    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_info/2

.    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_info/2

..    warning: the following clause will never match:

        {:ok, content, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_call/3

....    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_call/3

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{...}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{...})
         # from: test/ex_mcp/integration/full_workflow_test.exs:292
         left = config_result

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/integration/full_workflow_test.exs:292
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 292 │         assert config_result != nil
     │                              ~
     │
     └─ test/ex_mcp/integration/full_workflow_test.exs:292:30: ExMCP.Integration.FullWorkflowTest."test complex interaction scenarios resource-informed tool execution"/1

    warning: the following clause will never match:

        {:ok, content, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:ok, result, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_call/3

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:ok, result, final_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, new_state)

    which has type:

        dynamic({:error, :tool_not_implemented, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_call/3

    warning: the following clause will never match:

        {:ok, result, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:error, _reason, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_cast/2

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{...}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{...})
         # from: test/ex_mcp/integration/full_workflow_test.exs:293
         left = tool_result

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/integration/full_workflow_test.exs:293
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 293 │         assert tool_result != nil
     │                            ~
     │
     └─ test/ex_mcp/integration/full_workflow_test.exs:293:28: ExMCP.Integration.FullWorkflowTest."test complex interaction scenarios resource-informed tool execution"/1

    warning: the following clause will never match:

        {:error, _reason, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_cast/2

    warning: the following clause will never match:

        {:reply, _response, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.handle_cast/2

    warning: the following clause will never match:

        {:reply, _response, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.handle_cast/2

.    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.process_request/2

    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_call/3

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{...}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{...})
         # from: test/ex_mcp/integration/full_workflow_test.exs:321
         left = prompt_result

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/integration/full_workflow_test.exs:321
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 321 │         assert prompt_result != nil
     │                              ~
     │
     └─ test/ex_mcp/integration/full_workflow_test.exs:321:30: ExMCP.Integration.FullWorkflowTest."test complex interaction scenarios dynamic prompt generation and execution"/1

.    warning: function handle_call_tool/3 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.LoggingSetLevelTest.TestHandler)
    │
 12 │   defmodule TestHandler do
    │   ~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/logging_setlevel_test.exs:12: ExMCP.LoggingSetLevelTest.TestHandler (module)

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.process_request/2

    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_info/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_initialize(params, state)

    which has type:

        dynamic({:error, :initialize_not_implemented, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, state)

    which has type:

        dynamic({:error, :tool_not_implemented, term()})

    typing violation found at:
    │
 32 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:32: DebugVersionNegotiationTest.TestServerV2025.process_request/2

    warning: function handle_list_tools/2 required by behaviour ExMCP.Server.Handler is not implemented (in module ExMCP.LoggingSetLevelTest.TestHandler)
    │
 12 │   defmodule TestHandler do
    │   ~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/logging_setlevel_test.exs:12: ExMCP.LoggingSetLevelTest.TestHandler (module)

    warning: the following clause will never match:

        {:ok, content, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_call/3

     warning: ExMCP.SessionManager.add_event/3 is undefined or private
     │
 147 │       SessionManager.add_event(session_manager, session_id, response)
     │                      ~
     │
     └─ test/ex_mcp/session_management_integration_test.exs:147:22: ExMCP.SessionManagementIntegrationTest."test event storage and messaging stores events when sending SSE responses"/1

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server/transport_test.exs:7: ExMCP.Server.TransportTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_call/3

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{...}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{...})
         # from: test/ex_mcp/integration/full_workflow_test.exs:322
         left = execution_result

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/integration/full_workflow_test.exs:322
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 322 │         assert execution_result != nil
     │                                 ~
     │
     └─ test/ex_mcp/integration/full_workflow_test.exs:322:33: ExMCP.Integration.FullWorkflowTest."test complex interaction scenarios dynamic prompt generation and execution"/1

    warning: the following clause will never match:

        {:ok, result, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_call/3

.....    warning: the following clause will never match:

        {:ok, result, final_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, new_state)

    which has type:

        dynamic({:error, :tool_not_implemented, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_call/3

.    warning: the following clause will never match:

        {:error, _reason, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_cast/2

    warning: the following clause will never match:

        {:reply, _response, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.handle_cast/2

    warning: the following clause will never match:

        {:ok, content, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:error, :resource_not_found, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.process_request/2

     warning: ExMCP.Transport.send_message/2 is undefined or private
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_call/3

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:error, :prompt_not_implemented, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.process_request/2

    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.handle_call/3

    warning: ExMCP.Transport.send_message/2 is undefined or private
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_info/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, state)

    which has type:

        dynamic({:error, :tool_not_implemented, term()})

    typing violation found at:
    │
  7 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/debug_version_negotiation_test.exs:7: DebugVersionNegotiationTest.TestServerV2024.process_request/2

    warning: the following clause will never match:

        {:noreply, new_state}

    because it attempts to match on the result of:

        process_request(request, state)

    which has type:

        dynamic({:notification, term()} or {:response, %{...}, term()})

    typing violation found at:
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.handle_info/2

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{messages: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_call/3

     warning: the following clause will never match:

         {:noreply, new_state}

     because it attempts to match on the result of:

         process_request(request, state)

     which has type:

         dynamic({:notification, term()} or {:response, %{...}, term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_info/2

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{messages: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:ok, non_empty_list(term()), term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, new_state)

    which has type:

        dynamic({:ok, non_empty_list(%{...}), term()})

    typing violation found at:
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, final_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, new_state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(term())}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_call/3

     warning: the following clause will never match:

         {:ok, content, final_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, full_uri, new_state)

     which has type:

         dynamic({:error, binary(), term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:ok, non_empty_list(%{...}), term()})

    typing violation found at:
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, full_uri, state)

    which has type:

        dynamic({:ok, non_empty_list(term()), term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:ok, %{messages: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:error, _reason, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_cast/2

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:ok, non_empty_list(%{...}), term()})

    typing violation found at:
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:reply, _response, new_state}

    because it attempts to match on the result of:

        handle_request(method, params, state)

    which has type:

        dynamic({:noreply, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.handle_cast/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_initialize(params, state)

    which has type:

        dynamic({:error, :initialize_not_implemented, term()})

    typing violation found at:
    │
  8 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/server_test.exs:8: ExMCP.ServerTest.TestServer.process_request/2

     warning: the following clause will never match:

         {:ok, content, new_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, full_uri, state)

     which has type:

         dynamic({:error, binary(), term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_prompt_get(prompt_name, arguments, state)

    which has type:

        dynamic({:ok, %{messages: non_empty_list(%{...})}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.process_request/2

....    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_resource_read(uri, uri, state)

    which has type:

        dynamic({:ok, non_empty_list(term()), term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.process_request/2

     warning: the following clause will never match:

         {:ok, result, final_state}

     because it attempts to match on the result of:

         handle_prompt_get(prompt_name, arguments, new_state)

     which has type:

         dynamic({:error, binary(), term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_call/3

     warning: ExMCP.Transport.send_message/2 is undefined or private
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_call/3

    warning: the following clause will never match:

        {:error, reason, new_state}

    because it attempts to match on the result of:

        handle_tool_call(tool_name, arguments, state)

    which has type:

        dynamic({:ok, %{content: non_empty_list(term())}, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.process_request/2

    warning: the following clause will never match:

        {:ok, result, new_state}

    because it attempts to match on the result of:

        handle_initialize(params, state)

    which has type:

        dynamic({:error, :initialize_not_implemented, term()})

    typing violation found at:
    │
  6 │     use ExMCP.Server
    │     ~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/integration/server_dsl_test.exs:6: ExMCP.Integration.ServerDSLTest.TestServer.process_request/2

     warning: the following clause will never match:

         {:ok, result, final_state}

     because it attempts to match on the result of:

         handle_tool_call(tool_name, arguments, new_state)

     which has type:

         dynamic({:error, binary(), term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_call/3

     warning: the following clause will never match:

         {:noreply, new_state}

     because it attempts to match on the result of:

         process_request(request, state)

     which has type:

         dynamic({:notification, term()} or {:response, %{...}, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_info/2

     warning: the following clause will never match:

         {:error, _reason, new_state}

     because it attempts to match on the result of:

         handle_request(method, params, state)

     which has type:

         dynamic({:noreply, term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_cast/2

     warning: the following clause will never match:

         {:error, reason, final_state}

     because it attempts to match on the result of:

         handle_tool_call(tool_name, arguments, new_state)

     which has type:

         dynamic({:ok, %{content: non_empty_list(%{text: binary(), type: binary()})}, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_call/3

.     warning: the following clause will never match:

         {:reply, _response, new_state}

     because it attempts to match on the result of:

         handle_request(method, params, state)

     which has type:

         dynamic({:noreply, term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.handle_cast/2

     warning: the following clause will never match:

         {:ok, content, final_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, full_uri, new_state)

     which has type:

         dynamic({:error, :resource_not_found, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_call/3

     warning: the following clause will never match:

         {:ok, content, new_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, full_uri, state)

     which has type:

         dynamic({:error, :resource_not_found, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_call/3

     warning: the following clause will never match:

         {:ok, content, new_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, uri, state)

     which has type:

         dynamic({:error, binary(), term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.process_request/2

     warning: the following clause will never match:

         {:ok, result, final_state}

     because it attempts to match on the result of:

         handle_prompt_get(prompt_name, arguments, new_state)

     which has type:

         dynamic({:error, :prompt_not_implemented, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_call/3

     warning: the following clause will never match:

         {:ok, result, new_state}

     because it attempts to match on the result of:

         handle_initialize(params, state)

     which has type:

         dynamic({:error, :initialize_not_implemented, term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.process_request/2

.     warning: the following clause will never match:

         {:error, _reason, new_state}

     because it attempts to match on the result of:

         handle_request(method, params, state)

     which has type:

         dynamic({:noreply, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_cast/2

.     warning: the following clause will never match:

         {:ok, result, new_state}

     because it attempts to match on the result of:

         handle_prompt_get(prompt_name, arguments, state)

     which has type:

         dynamic({:error, binary(), term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.process_request/2

     warning: the following clause will never match:

         {:reply, _response, new_state}

     because it attempts to match on the result of:

         handle_request(method, params, state)

     which has type:

         dynamic({:noreply, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.handle_cast/2

..     warning: the following clause will never match:

         {:error, reason, new_state}

     because it attempts to match on the result of:

         handle_tool_call(tool_name, arguments, state)

     which has type:

         dynamic({:ok, %{content: non_empty_list(%{text: binary(), type: binary()})}, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.process_request/2

     warning: the following clause will never match:

         {:ok, result, new_state}

     because it attempts to match on the result of:

         handle_tool_call(tool_name, arguments, state)

     which has type:

         dynamic({:error, binary(), term()})

     typing violation found at:
     │
 222 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/server_test.exs:222: ExMCP.ServerTest.MinimalServer.process_request/2

     warning: ExMCP.Protocol.encode_initialize/2 is deprecated. Use ExMCP.Internal.Protocol instead. Note that internal modules are not part of the public API.
     │
 602 │         Protocol.encode_initialize(
     │                  ~
     │
     └─ test/ex_mcp/version_negotiation_comprehensive_test.exs:602:18: ExMCP.VersionNegotiationComprehensiveTest."test spec compliance for version negotiation initialize request MUST include protocolVersion"/1

     warning: the following clause will never match:

         {:ok, content, new_state}

     because it attempts to match on the result of:

         handle_resource_read(uri, uri, state)

     which has type:

         dynamic({:error, :resource_not_found, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.process_request/2

     warning: the following clause will never match:

         {:ok, result, new_state}

     because it attempts to match on the result of:

         handle_initialize(params, state)

     which has type:

         dynamic({:error, :initialize_not_implemented, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.process_request/2

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{description: term(), input_schema: term(), metadata: term(), name: term()}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{description: term(), input_schema: term(), metadata: term(), name: term()})
         # from: test/ex_mcp/client/response_test.exs:798
         left = ExMCP.Client.Response.normalize_tool(%{})

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/client/response_test.exs:798
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 798 │       assert Response.normalize_tool(%{}) != nil
     │                                           ~
     │
     └─ test/ex_mcp/client/response_test.exs:798:43: ExMCP.Client.ResponseTest."test metadata extraction handles non-map inputs gracefully"/1

     warning: the following clause will never match:

         {:ok, result, new_state}

     because it attempts to match on the result of:

         handle_prompt_get(prompt_name, arguments, state)

     which has type:

         dynamic({:error, :prompt_not_implemented, term()})

     typing violation found at:
     │
 101 │     use ExMCP.Server
     │     ~~~~~~~~~~~~~~~~
     │
     └─ test/ex_mcp/message_processor_validation_test.exs:101: ExMCP.MessageProcessorValidationTest.MinimalDslServer.process_request/2

    warning: ExMCP.DSL.Tool.__compile_schema__/1 is undefined or private
    │
 22 │       schema = Tool.__compile_schema__(fields)
    │                     ~
    │
    └─ test/ex_mcp/dsl/tool_test.exs:22:21: ExMCP.DSL.ToolTest."test __compile_schema__/1 compiles simple fields to JSON Schema"/1
    └─ test/ex_mcp/dsl/tool_test.exs:46:21: ExMCP.DSL.ToolTest."test __compile_schema__/1 compiles array fields"/1
    └─ test/ex_mcp/dsl/tool_test.exs:68:21: ExMCP.DSL.ToolTest."test __compile_schema__/1 compiles nested object fields"/1
    └─ test/ex_mcp/dsl/tool_test.exs:90:21: ExMCP.DSL.ToolTest."test __compile_schema__/1 handles string patterns"/1
    └─ test/ex_mcp/dsl/tool_test.exs:100:21: ExMCP.DSL.ToolTest."test __compile_schema__/1 handles default values"/1
    └─ test/ex_mcp/dsl/tool_test.exs:110:21: ExMCP.DSL.ToolTest."test __compile_schema__/1 omits required array when no required fields"/1

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{description: term(), metadata: term(), mime_type: term(), name: term(), uri: term()}) !=
           nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{description: term(), metadata: term(), mime_type: term(), name: term(), uri: term()})
         # from: test/ex_mcp/client/response_test.exs:799
         left = ExMCP.Client.Response.normalize_resource(%{})

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/client/response_test.exs:799
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 799 │       assert Response.normalize_resource(%{}) != nil
     │                                               ~
     │
     └─ test/ex_mcp/client/response_test.exs:799:47: ExMCP.Client.ResponseTest."test metadata extraction handles non-map inputs gracefully"/1

     warning: comparison between distinct types found:

         left != right

     given types:

         dynamic(%{arguments: term(), description: term(), metadata: term(), name: term()}) != nil

     where "left" (context ExUnit.Assertions) was given the type:

         # type: dynamic(%{arguments: term(), description: term(), metadata: term(), name: term()})
         # from: test/ex_mcp/client/response_test.exs:800
         left = ExMCP.Client.Response.normalize_prompt(%{})

     where "right" (context ExUnit.Assertions) was given the type:

         # type: nil
         # from: test/ex_mcp/client/response_test.exs:800
         right = nil

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 800 │       assert Response.normalize_prompt(%{}) != nil
     │                                             ~
     │
     └─ test/ex_mcp/client/response_test.exs:800:45: ExMCP.Client.ResponseTest."test metadata extraction handles non-map inputs gracefully"/1

.....    warning: Horde.Supervisor.start_link/2 is undefined (module Horde.Supervisor is not available or is yet to be defined)
    │
 18 │     {:ok, _sup} = Horde.Supervisor.start_link([], name: supervisor_name)
    │                                    ~
    │
    └─ test/ex_mcp/debug_service_test.exs:18:36: ExMCP.DebugServiceTest.__ex_unit_setup_0/1

     warning: Horde.Registry.members/1 is undefined or private
     │
 140 │     members = Horde.Registry.members(registry_name)
     │                              ~
     │
     └─ test/ex_mcp/debug_service_test.exs:140:30: ExMCP.DebugServiceTest."test list available services and inspect registry state"/1

.............    warning: Bypass.open/0 is undefined (module Bypass is not available or is yet to be defined). Make sure the module name is correct and has been specified in full (or that an alias has been defined)
    │
 62 │       bypass = Bypass.open()
    │                       ~
    │
    └─ test/ex_mcp/authorization/server_guard_test.exs:62:23: ExMCP.Authorization.ServerGuardTest.__ex_unit_setup_1_0/1

    warning: Bypass.stub/4 is undefined (module Bypass is not available or is yet to be defined). Make sure the module name is correct and has been specified in full (or that an alias has been defined)
    │
 76 │       Bypass.stub(bypass, "POST", "/introspect", fn conn ->
    │              ~
    │
    └─ test/ex_mcp/authorization/server_guard_test.exs:76:14: ExMCP.Authorization.ServerGuardTest."test authorize/3 with mock introspection endpoint successfully authorizes with valid token and sufficient scopes"/1
    └─ test/ex_mcp/authorization/server_guard_test.exs:88:14: ExMCP.Authorization.ServerGuardTest."test authorize/3 with mock introspection endpoint returns error for invalid token"/1
    └─ test/ex_mcp/authorization/server_guard_test.exs:107:14: ExMCP.Authorization.ServerGuardTest."test authorize/3 with mock introspection endpoint returns error for insufficient scope"/1
    └─ test/ex_mcp/authorization/server_guard_test.exs:133:14: ExMCP.Authorization.ServerGuardTest."test authorize/3 with mock introspection endpoint handles token with no scope when scopes are required"/1
    └─ test/ex_mcp/authorization/server_guard_test.exs:147:14: ExMCP.Authorization.ServerGuardTest."test authorize/3 with mock introspection endpoint handles token with nil scope when scopes are required"/1
    └─ test/ex_mcp/authorization/server_guard_test.exs:158:14: ExMCP.Authorization.ServerGuardTest."test authorize/3 with mock introspection endpoint succeeds when no scopes are required"/1
    └─ test/ex_mcp/authorization/server_guard_test.exs:167:14: ExMCP.Authorization.ServerGuardTest."test authorize/3 with mock introspection endpoint allows http for localhost introspection endpoint"/1

.......

 23) property from_raw_response preserves all fields (ExMCP.ResponsePropertyTest)
     test/ex_mcp/response_property_test.exs:12
     Property Elixir.ExMCP.ResponsePropertyTest.property from_raw_response preserves all fields() failed. Counter-Example is:
     [%{"contents" => [%{"a" => ""}]}]

     Consider running `MIX_ENV=test mix propcheck.clean` if a bug in a generator was
     identified and fixed. PropCheck cannot identify changes to generators. See
     https://github.com/alfert/propcheck/issues/30 for more details.

     code: nil
     stacktrace:
       (propcheck 1.5.0) lib/properties.ex:269: PropCheck.Properties.handle_check_results/2
       test/ex_mcp/response_property_test.exs:12: (test)

.....................................Calculating statistics...
Formatting results...
.

 24) test HTTP Transport Integration blocks requests without consent (ExMcp.Transport.SecurityIntegrationTest)
     test/ex_mcp/transport/security_integration_test.exs:71
     match (=) failed
     code:  assert {:error, error_type} = result
     left:  {:error, error_type}
     right: {:ok,
             %{
               "id" => 1,
               "jsonrpc" => "2.0",
               "result" => %{"content" => "Resource content"}
             },
             %{
               id: 1,
               meta: %{token: "secret-test-token-for-integration"},
               params: %{uri: "https://api.example.com/data"},
               method: "resources/read",
               jsonrpc: "2.0"
             }}
     stacktrace:
       test/ex_mcp/transport/security_integration_test.exs:76: (test)



 25) test BEAM Transport Integration blocks requests without consent (ExMcp.Transport.SecurityIntegrationTest)
     test/ex_mcp/transport/security_integration_test.exs:131
     match (=) failed
     code:  assert {:error, error_type} = result
     left:  {:error, error_type}
     right: {:ok,
             %{
               "id" => 1,
               "jsonrpc" => "2.0",
               "result" => %{"content" => "Resource content"}
             },
             %{
               id: 1,
               params: %{uri: "https://api.example.com/data"},
               method: "resources/read",
               jsonrpc: "2.0"
             }}
     stacktrace:
       test/ex_mcp/transport/security_integration_test.exs:136: (test)



 26) test Stdio Transport Integration blocks requests without consent (ExMcp.Transport.SecurityIntegrationTest)
     test/ex_mcp/transport/security_integration_test.exs:101
     match (=) failed
     code:  assert {:error, error_type} = result
     left:  {:error, error_type}
     right: {:ok,
             %{
               "id" => 1,
               "jsonrpc" => "2.0",
               "result" => %{"content" => "Resource content"}
             },
             %{
               id: 1,
               params: %{uri: "https://api.example.com/data"},
               method: "resources/read",
               jsonrpc: "2.0"
             }}
     stacktrace:
       test/ex_mcp/transport/security_integration_test.exs:106: (test)

..

 27) test Client.subscribe_resource/2 supports format option (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:67
     ** (exit) exited in: GenServer.call(#PID<0.3598.0>, :get_default_timeout, 5000)
         ** (EXIT) time out
     code: assert {:ok, result} = Client.subscribe_resource(client, "file:///test.txt")
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:959: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:77: (test)



 28) test Client-Side Cancellation client ignores responses after cancellation (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:320
     match (=) failed
     code:  assert [{1, {:ok, _}}, {2, {:error, :cancelled}}, {3, {:ok, _}}] = results
     left:  [{1, {:ok, _}}, {2, {:error, :cancelled}}, {3, {:ok, _}}]
     right: [
              {1,
               {:ok,
                %ExMCP.Response{
                  content: [
                    %{
                      data: nil,
                      type: "text",
                      text: "Iteration 1 complete. Iteration 2 complete. Iteration 3 complete. Iteration 4 complete. Iteration 5 complete. Iteration 6 complete. Iteration 7 complete. Iteration 8 complete. Iteration 9 complete. Iteration 10 complete. Iteration 11 complete. Iteration 12 complete. Iteration 13 complete. Iteration 14 complete. Iteration 15 complete. Iteration 16 complete. Iteration 17 complete. Iteration 18 complete. Iteration 19 complete. Iteration 20 complete. Iteration 21 complete. Iteration 22 complete. Iteration 23 complete. Iteration 24 complete. Iteration 25 complete. Iteration 26 complete. Iteration 27 complete. Iteration 28 complete. Iteration 29 complete. Iteration 30 complete. Iteration 31 complete. Iteration 32 complete. Iteration 33 complete. Iteration 34 complete. Iteration 35 complete. Iteration 36 complete. Iteration 37 complete. Iteration 38 complete. Iteration 39 complete. Iteration 40 complete. Iteration 41 complete. Iteration 42 complete. Iteration 43 complete. Iteration 44 complete. Iteration 45 complete. Iteration 46 complete. Iteration 47 complete. Iteration 48 complete. Iteration 49 complete. Iteration 50 complete. ",
                      annotations: nil
                    }
                  ],
                  meta: nil,
                  tool_name: "cancellable_tool",
                  request_id: nil,
                  server_info: nil,
                  is_error: false,
                  structuredOutput: nil,
                  resourceLinks: nil,
                  tools: nil,
                  resources: nil,
                  prompts: nil,
                  messages: nil,
                  roots: nil,
                  resourceTemplates: nil,
                  nextCursor: nil,
                  contents: nil,
                  description: nil,
                  completion: nil
                }}},
              {2,
               {:error,
                %ExMCP.Error{
                  code: :connection_error,
                  message: "Connection error: Transport closed: {:timeout_error, :receive_timeout}",
                  data: nil,
                  request_id: nil
                }}},
              {3,
               {:error,
                %ExMCP.Error{
                  code: :connection_error,
                  message: "Connection error: Transport closed: {:timeout_error, :receive_timeout}",
                  data: nil,
                  request_id: nil
                }}}
            ]
     stacktrace:
       test/ex_mcp/cancellation_comprehensive_test.exs:345: (test)

...

 29) test Client-Side Cancellation client handles cancellation of completed requests (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:360
     ** (EXIT from #PID<0.4811.0>) an exception was raised:

          ** (FunctionClauseError) no function clause matching in ExMCP.Server.Legacy.handle_info/2

          The following arguments were given to ExMCP.Server.Legacy.handle_info/2:

              # 1
              {:cancelled, "already_completed"}

              # 2
              %{handler_state: %{cancelled_requests: MapSet.new(["already_completed"]), active_requests: %{}}, protocol_version: nil, transport: ExMCP.Transport.Test, transport_state: %ExMCP.Transport.Test{peer_pid: #PID<0.4814.0>, role: :server}, pending_requests: %{}, cancelled_requests: MapSet.new(["already_completed"]), handler_module: ExMCP.CancellationComprehensiveTest.SlowHandler}

          Attempted function clauses (showing 5 out of 5):

              def handle_info(-:start_message_loop-, state)
              def handle_info(-{:transport_message, message}-, state)
              def handle_info(-{:transport_error, reason}-, state)
              def handle_info(-{:test_transport_connect, client_pid}-, state)
              def handle_info(-{:transport_closed}-, state)

          stacktrace:
            (ex_mcp 0.6.0) lib/ex_mcp/server/legacy.ex:121: ExMCP.Server.Legacy.handle_info/2
            (stdlib 7.0.1) gen_server.erl:2434: :gen_server.try_handle_info/3
            (stdlib 7.0.1) gen_server.erl:2420: :gen_server.handle_msg/3
            (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3


.

 30) test Client.subscribe_resource/2 handles subscription error response (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:41
     ** (exit) exited in: GenServer.call(#PID<0.4801.0>, :get_default_timeout, 5000)
         ** (EXIT) time out
     code: Client.subscribe_resource(client, "file:///missing.txt")
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:959: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:51: (test)



 31) test Race Conditions and Timing handles response arriving after cancellation (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:503
     match (=) failed
     code:  assert {:error, :cancelled} = Task.await(task, 5000)
     left:  {:error, :cancelled}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport closed: {:timeout_error, :receive_timeout}",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/cancellation_comprehensive_test.exs:517: (test)



 32) test Client-Side Cancellation client handles cancellation of unknown requests gracefully (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:348
     ** (EXIT from #PID<0.4828.0>) an exception was raised:

          ** (FunctionClauseError) no function clause matching in ExMCP.Server.Legacy.handle_info/2

          The following arguments were given to ExMCP.Server.Legacy.handle_info/2:

              # 1
              {:cancelled, "unknown_req_id"}

              # 2
              %{handler_state: %{cancelled_requests: MapSet.new(["unknown_req_id"]), active_requests: %{}}, protocol_version: nil, transport: ExMCP.Transport.Test, transport_state: %ExMCP.Transport.Test{peer_pid: #PID<0.4831.0>, role: :server}, pending_requests: %{}, cancelled_requests: MapSet.new(["unknown_req_id"]), handler_module: ExMCP.CancellationComprehensiveTest.SlowHandler}

          Attempted function clauses (showing 5 out of 5):

              def handle_info(-:start_message_loop-, state)
              def handle_info(-{:transport_message, message}-, state)
              def handle_info(-{:transport_error, reason}-, state)
              def handle_info(-{:test_transport_connect, client_pid}-, state)
              def handle_info(-{:transport_closed}-, state)

          stacktrace:
            (ex_mcp 0.6.0) lib/ex_mcp/server/legacy.ex:121: ExMCP.Server.Legacy.handle_info/2
            (stdlib 7.0.1) gen_server.erl:2434: :gen_server.try_handle_info/3
            (stdlib 7.0.1) gen_server.erl:2420: :gen_server.handle_msg/3
            (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3




 33) test Client.unsubscribe_resource/2 handles unsubscription success response (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:104
     ** (exit) exited in: GenServer.call(#PID<0.4826.0>, :get_default_timeout, 5000)
         ** (EXIT) time out
     code: assert {:ok, %{}} = Client.unsubscribe_resource(client, "file:///test.txt")
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:959: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:113: (test)



 34) test Server-Side Cancellation Handling server stops processing cancelled requests (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:397
     match (=) failed
     code:  assert {:error, :cancelled} = Task.await(task, 5000)
     left:  {:error, :cancelled}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport closed: {:timeout_error, :receive_timeout}",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/cancellation_comprehensive_test.exs:413: (test)



 35) test Client.subscribe_resource/2 handles subscription success response (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:29
     ** (exit) exited in: GenServer.call(#PID<0.4842.0>, :get_default_timeout, 5000)
         ** (EXIT) time out
     code: assert {:ok, %{}} = Client.subscribe_resource(client, "file:///test.txt")
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:959: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:38: (test)

.

 36) test Server-Side Cancellation Handling server frees resources for cancelled requests (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:416
     All results should be either success or cancellation
     code: assert Enum.all?(results, fn
     stacktrace:
       test/ex_mcp/cancellation_comprehensive_test.exs:446: (test)



 37) test Client.unsubscribe_resource/2 creates proper unsubscription request (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:86
     ** (exit) exited in: GenServer.call(#PID<0.4858.0>, :get_default_timeout, 5000)
         ** (EXIT) time out
     code: assert {:ok, _result} = Client.unsubscribe_resource(client, "file:///config.json")
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:959: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:98: (test)



 38) test Client-Side Cancellation client can cancel in-progress requests (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:297
     match (=) failed
     code:  assert {:error, :cancelled} = Task.await(task)
     left:  {:error, :cancelled}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport closed: {:timeout_error, :receive_timeout}",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/cancellation_comprehensive_test.exs:314: (test)

.

 39) test Implementation Requirements cancellation notifications reference only valid requests (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:620
     ** (exit) exited in: Task.await(%Task{mfa: {:erlang, :apply, 2}, owner: #PID<0.4876.0>, pid: #PID<0.4881.0>, ref: #Reference<0.0.624131.3811111748.4027121666.1124>}, 3000)
         ** (EXIT) time out
     code: result = Task.await(task, 3000)
     stacktrace:
       (elixir 1.18.4) lib/task.ex:888: Task.await_receive/3
       test/ex_mcp/cancellation_comprehensive_test.exs:659: (test)



 40) test Bidirectional Cancellation both client and server can send cancellation notifications (ExMCP.CancellationComprehensiveTest)
     test/ex_mcp/cancellation_comprehensive_test.exs:545
     ** (EXIT from #PID<0.4883.0>) an exception was raised:

          ** (FunctionClauseError) no function clause matching in ExMCP.Server.Legacy.handle_info/2

          The following arguments were given to ExMCP.Server.Legacy.handle_info/2:

              # 1
              {:cancelled, "client_cancel"}

              # 2
              %{handler_state: %{cancelled_requests: MapSet.new(["client_cancel"]), active_requests: %{}}, protocol_version: nil, transport: ExMCP.Transport.Test, transport_state: %ExMCP.Transport.Test{peer_pid: #PID<0.4886.0>, role: :server}, pending_requests: %{}, cancelled_requests: MapSet.new(["client_cancel"]), handler_module: ExMCP.CancellationComprehensiveTest.SlowHandler}

          Attempted function clauses (showing 5 out of 5):

              def handle_info(-:start_message_loop-, state)
              def handle_info(-{:transport_message, message}-, state)
              def handle_info(-{:transport_error, reason}-, state)
              def handle_info(-{:test_transport_connect, client_pid}-, state)
              def handle_info(-{:transport_closed}-, state)

          stacktrace:
            (ex_mcp 0.6.0) lib/ex_mcp/server/legacy.ex:121: ExMCP.Server.Legacy.handle_info/2
            (stdlib 7.0.1) gen_server.erl:2434: :gen_server.try_handle_info/3
            (stdlib 7.0.1) gen_server.erl:2420: :gen_server.handle_msg/3
            (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3


.

 41) test Client.unsubscribe_resource/2 handles unsubscription error response (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:116
     ** (exit) exited in: GenServer.call(#PID<0.4868.0>, :get_default_timeout, 5000)
         ** (EXIT) time out
     code: assert {:error, "Not subscribed"} = Client.unsubscribe_resource(client, "file:///test.txt")
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:959: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:125: (test)

.

 42) test Client.subscribe_resource/2 supports timeout option (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:54
     ** (exit) exited in: GenServer.call(#PID<0.4892.0>, :get_default_retry_policy, 200)
         ** (EXIT) time out
     code: assert {:ok, %{}} = Client.subscribe_resource(client, "file:///slow.txt", timeout: 200)
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:982: ExMCP.Client.get_effective_retry_policy/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:967: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:64: (test)

..

 43) test Client.subscribe_resource/2 creates proper subscription request (ExMCP.ClientSubscriptionTest)
     test/ex_mcp/client_subscription_test.exs:9
     ** (exit) exited in: GenServer.call(#PID<0.4896.0>, :get_default_timeout, 5000)
         ** (EXIT) time out
     code: assert {:ok, _result} = Client.subscribe_resource(client, "file:///config.json")
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1128: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/client.ex:959: ExMCP.Client.make_request/5
       test/ex_mcp/client_subscription_test.exs:23: (test)

...............................

 44) test MCP-Specific Protocol Requirements protocol version is correct (ExMCP.Internal.ProtocolComplianceTest)
     test/ex_mcp/internal/protocol_compliance_test.exs:120
     Protocol version must be 2025-03-26
     code: assert msg["params"]["protocolVersion"] == "2025-03-26",
     stacktrace:
       test/ex_mcp/internal/protocol_compliance_test.exs:123: (test)

......

 45) test Stdio Transport Isolation allows relative URI resource access (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:98
     Unexpected result for relative resource: {:error, {:transport_error, {:send_failed, :badarg}}}
     code: flunk("Unexpected result for relative resource: #{inspect(other)}")
     stacktrace:
       test/ex_mcp/transport/stdio_isolation_test.exs:130: (test)



 46) test Stdio Transport Isolation and Format Validation validates that only valid MCP messages are sent to stdin (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:627
     Unexpected result for invalid JSON 'plain text message': {:error, {:security_violation, {:validation_error, {:invalid_json, "Invalid JSON format: %Jason.DecodeError{position: 0, token: nil, data: \"plain text message\"}"}}}}
     code: for invalid_input <- invalid_inputs do
     stacktrace:
       (elixir 1.18.4) lib/enum.ex:1714: Enum."-map/2-lists^map/1-1-"/2
       test/ex_mcp/transport/stdio_isolation_test.exs:648: (test)



 47) test Stdio Transport Newline Constraints handles escaped newlines correctly (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:511
     Unexpected result for escaped newlines: {:error, {:transport_error, {:send_failed, :badarg}}}
     code: flunk("Unexpected result for escaped newlines: #{inspect(other)}")
     stacktrace:
       test/ex_mcp/transport/stdio_isolation_test.exs:547: (test)



 48) test Stdio Transport Isolation and Format Validation accepts valid JSON-RPC 2.0 messages (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:727
     Valid JSON-RPC should not be rejected: {"jsonrpc": "2.0", "method": "tools/list", "id": 1}, error: {:transport_error, {:send_failed, :badarg}}
     code: for valid_message <- valid_jsonrpc_messages do
     stacktrace:
       (elixir 1.18.4) lib/enum.ex:1714: Enum."-map/2-lists^map/1-1-"/2
       test/ex_mcp/transport/stdio_isolation_test.exs:746: (test)

..

 49) test Stdio Transport Newline Constraints rejects JSON-RPC batch messages with embedded newlines (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:418
     Unexpected result for batch embedded newline test: {:error, {:security_violation, {:validation_error, {:embedded_newline, "Message contains embedded newlines which violate MCP stdio transport requirements"}}}}
     code: flunk("Unexpected result for batch embedded newline test: #{inspect(other)}")
     stacktrace:
       test/ex_mcp/transport/stdio_isolation_test.exs:462: (test)

........

 50) test Stdio Transport Isolation allows non-resource methods through without security validation (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:134
     Unexpected result for non-resource method: {:error, {:transport_error, {:send_failed, :badarg}}}
     code: flunk("Unexpected result for non-resource method: #{inspect(other)}")
     stacktrace:
       test/ex_mcp/transport/stdio_isolation_test.exs:166: (test)



 51) test Stdio Transport Isolation and Format Validation validates JSON-RPC 2.0 message structure for stdio (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:684
     Unexpected result for invalid JSON-RPC '{"method": "tools/list", "id": 1}': {:error, {:security_violation, {:validation_error, {:invalid_jsonrpc, "Missing required 'jsonrpc' field"}}}}
     code: for invalid_message <- invalid_jsonrpc_messages do
     stacktrace:
       (elixir 1.18.4) lib/enum.ex:1714: Enum."-map/2-lists^map/1-1-"/2
       test/ex_mcp/transport/stdio_isolation_test.exs:701: (test)



 52) test Stdio Transport Newline Constraints rejects JSON messages with embedded newlines (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:370
     Unexpected result for embedded newline test: {:error, {:security_violation, {:validation_error, {:embedded_newline, "Message contains embedded newlines which violate MCP stdio transport requirements"}}}}
     code: flunk("Unexpected result for embedded newline test: #{inspect(other)}")
     stacktrace:
       test/ex_mcp/transport/stdio_isolation_test.exs:414: (test)



 53) test Stdio Transport Newline Constraints accepts messages without embedded newlines (ExMCP.Transport.StdioIsolationTest)
     test/ex_mcp/transport/stdio_isolation_test.exs:466
     Unexpected result for valid message: {:error, {:transport_error, {:send_failed, :badarg}}}
     code: flunk("Unexpected result for valid message: #{inspect(other)}")
     stacktrace:
       test/ex_mcp/transport/stdio_isolation_test.exs:507: (test)

...................

 54) test batch message parsing handles empty batch (ExMCP.Internal.ProtocolBatchTest)
     test/ex_mcp/internal/protocol_batch_test.exs:97
     match (=) failed
     code:  assert {:batch, []} = Protocol.parse_message([])
     left:  {:batch, []}
     right: {:error, :validation_failed,
             %{
               code: -32600,
               message: "Empty batch array is invalid"
             }}
     stacktrace:
       test/ex_mcp/internal/protocol_batch_test.exs:98: (test)

............................

 55) test create_reliable_client/2 generates unique client IDs for multiple clients (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:176
     ** (exit) exited in: GenServer.stop(#PID<0.5237.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5237.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:60: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_1_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 56) test create_reliable_client/2 creates reliable client with circuit breaker (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:84
     ** (exit) exited in: GenServer.stop(#PID<0.5251.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5251.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:60: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_1_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 57) test ExMCP.Reliability.protect/2 handles function arguments correctly (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:431
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: Reliability.protect(fn -> {:ok, 8} end,
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:435: (test)



 58) test error handling and edge cases handles empty and nil options gracefully (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:612
     ** (EXIT from #PID<0.5263.0>) {:transport_connect_failed, "No transport specified. Please provide :transport or :transports option."}

.

 59) test ExMCP.Reliability.protect/2 creates circuit breaker protected function (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:347
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: Reliability.protect(fn -> {:ok, "success"} end,
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:352: (test)

.

 60) test ExMCP.Reliability.protect/2 reuses circuit breaker for same function (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:395
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: protected_fn = Reliability.protect(fn -> {:ok, "test"} end, name: breaker_name)
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:398: (test)

.

 61) test ExMCP.Reliability.protect/2 creates unique circuit breakers for different functions (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:413
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: Reliability.protect(fn -> {:ok, "fn1"} end,
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:418: (test)



 62) test ClientWrapper integration wrapper monitors underlying client (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:261
     ** (exit) exited in: GenServer.stop(#PID<0.5286.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5286.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:235: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_2_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 63) test create_reliable_client/2 creates reliable client with retry configuration (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:125
     ** (exit) exited in: GenServer.stop(#PID<0.5297.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5297.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:60: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_1_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

.

 64) test create_reliable_client/2 accepts custom client ID (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:198
     ** (exit) exited in: GenServer.stop(#PID<0.5314.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5314.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:60: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_1_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

.

 65) test create_reliable_client/2 creates reliable client with health check (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:105
     ** (exit) exited in: GenServer.stop(#PID<0.5327.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5327.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:60: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_1_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 66) test ExMCP.Reliability.protect/2 respects circuit breaker configuration (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:443
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: Reliability.protect(
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:450: (test)



 67) test error handling and edge cases handles invalid supervisor reference (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:602
     ** (exit) exited in: GenServer.call(ExMCP.Reliability.Supervisor.CircuitBreakerSupervisor, {:start_child, {{ExMCP.Reliability.Supervisor.ClientWrapper, :start_link, [[client: #PID<0.5342.0>, circuit_breaker: nil, retry_opts: [], health_check: nil]]}, :temporary, 5000, :worker, [ExMCP.Reliability.Supervisor.ClientWrapper]}}, :infinity)
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     code: ReliabilitySupervisor.create_reliable_client(
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1121: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:129: ExMCP.Reliability.Supervisor.create_wrapper_and_cleanup/5
       test/ex_mcp/reliability/supervisor_test.exs:606: (test)



 68) test create_reliable_client/2 creates reliable client with all reliability features (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:145
     ** (exit) exited in: GenServer.stop(#PID<0.5346.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5346.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:60: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_1_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 69) test create_reliable_client/2 handles transport start failure gracefully (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:164
     ** (EXIT from #PID<0.5358.0>) an exception was raised:
         ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not a nonempty list

             (erts 16.0.1) :erlang.tl("/nonexistent/command")
             (ex_mcp 0.6.0) lib/ex_mcp/transport/stdio.ex:47: ExMCP.Transport.Stdio.connect/1
             (ex_mcp 0.6.0) lib/ex_mcp/client/connection_manager.ex:122: ExMCP.Client.ConnectionManager.connect_with_reliability/3
             (ex_mcp 0.6.0) lib/ex_mcp/client/connection_manager.ex:47: ExMCP.Client.ConnectionManager.do_establish_connection/2
             (ex_mcp 0.6.0) lib/ex_mcp/client.ex:668: ExMCP.Client.init/1
             (stdlib 7.0.1) gen_server.erl:2276: :gen_server.init_it/2
             (stdlib 7.0.1) gen_server.erl:2236: :gen_server.init_it/6
             (stdlib 7.0.1) proc_lib.erl:333: :proc_lib.init_p_do_apply/3

.

 70) test integration scenarios combining convenience functions with supervised clients (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:561
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: Reliability.protect(fn -> {:ok, "protect_success"} end,
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:581: (test)



 71) test create_reliable_client/2 creates basic reliable client without reliability features (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:67
     ** (exit) exited in: GenServer.stop(#PID<0.5382.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5382.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:60: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_1_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 72) test ExMCP.Reliability.protect/2 circuit breaker trips on repeated failures (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:361
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: Reliability.protect(
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:369: (test)



 73) test error handling and edge cases protect function handles exceptions in protected function (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:635
     ** (ArgumentError) The module CircuitBreaker was given as a child to a supervisor but it does not exist
     code: Reliability.protect(
     stacktrace:
       (elixir 1.18.4) lib/supervisor.ex:797: Supervisor.init_child/1
       (elixir 1.18.4) lib/supervisor.ex:905: Supervisor.child_spec/2
       (elixir 1.18.4) lib/dynamic_supervisor.ex:435: DynamicSupervisor.start_child/2
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:393: ExMCP.Reliability.protect/2
       test/ex_mcp/reliability/supervisor_test.exs:639: (test)



 74) test integration scenarios supervisor recovery after child failure (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:531
     ** (exit) exited in: GenServer.stop(#PID<0.5398.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5398.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:482: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_5_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 75) test integration scenarios multiple reliable clients can coexist (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:489
     ** (exit) exited in: GenServer.stop(#PID<0.5412.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5412.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:482: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_5_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 76) test ClientWrapper integration wrapped client forwards MCP operations (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:242
     ** (exit) exited in: GenServer.stop(#PID<0.5431.0>, :normal, :infinity)
         ** (EXIT) exited in: :sys.terminate(#PID<0.5431.0>, :normal, :infinity)
             ** (EXIT) shutdown
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1089: GenServer.stop/3
       test/ex_mcp/reliability/supervisor_test.exs:235: anonymous fn/2 in ExMCP.Reliability.SupervisorTest.__ex_unit_setup_2_0/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.4) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

.

 77) test create_reliable_client/2 cleans up on wrapper start failure (ExMCP.Reliability.SupervisorTest)
     test/ex_mcp/reliability/supervisor_test.exs:213
     ** (exit) exited in: GenServer.call(ExMCP.Reliability.Supervisor.CircuitBreakerSupervisor, {:start_child, {{ExMCP.Reliability.Supervisor.ClientWrapper, :start_link, [[client: #PID<0.5449.0>, circuit_breaker: nil, retry_opts: [], health_check: nil]]}, :temporary, 5000, :worker, [ExMCP.Reliability.Supervisor.ClientWrapper]}}, :infinity)
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     code: ReliabilitySupervisor.create_reliable_client(
     stacktrace:
       (elixir 1.18.4) lib/gen_server.ex:1121: GenServer.call/3
       (ex_mcp 0.6.0) lib/ex_mcp/reliability/supervisor.ex:129: ExMCP.Reliability.Supervisor.create_wrapper_and_cleanup/5
       test/ex_mcp/reliability/supervisor_test.exs:219: (test)

.................

 78) test Client with BEAM transport respects timeout settings (ExMCP.ClientBeamTransportTest)
     test/ex_mcp/client_beam_transport_test.exs:229
     match (=) failed
     code:  assert {:error, :timeout} = Client.call_tool(client, "slow_operation", %{}, format: :map)
     left:  {:error, :timeout}
     right: {:error,
             %ExMCP.Error{
               code: -32603,
               message: "Internal error: Request timeout",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/client_beam_transport_test.exs:239: (test)

    warning: redefining module ExMCP.ClientBeamTransportTest.TestCalculatorService (current version defined in memory)
    │
 17 │       defmodule TestCalculatorService do
    │       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/client_beam_transport_test.exs:17: ExMCP.ClientBeamTransportTest.TestCalculatorService (module)



 79) test Client with BEAM transport handles errors via BEAM transport (ExMCP.ClientBeamTransportTest)
     test/ex_mcp/client_beam_transport_test.exs:191
     match (=) failed
     code:  assert {:error, %{"code" => -32602, "message" => "Division by zero"}} =
              Client.call_tool(client, "divide", %{"a" => 10, "b" => 0}, format: :map)
     left:  {:error, %{"code" => -32602, "message" => "Division by zero"}}
     right: {:error,
             %ExMCP.Error{
               code: -32602,
               message: "Division by zero",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp/client_beam_transport_test.exs:199: (test)

    warning: redefining module ExMCP.ClientBeamTransportTest.TestCalculatorService (current version defined in memory)
    │
 17 │       defmodule TestCalculatorService do
    │       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/client_beam_transport_test.exs:17: ExMCP.ClientBeamTransportTest.TestCalculatorService (module)

.    warning: redefining module ExMCP.ClientBeamTransportTest.TestCalculatorService (current version defined in memory)
    │
 17 │       defmodule TestCalculatorService do
    │       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/client_beam_transport_test.exs:17: ExMCP.ClientBeamTransportTest.TestCalculatorService (module)

.    warning: redefining module ExMCP.ClientBeamTransportTest.TestCalculatorService (current version defined in memory)
    │
 17 │       defmodule TestCalculatorService do
    │       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/client_beam_transport_test.exs:17: ExMCP.ClientBeamTransportTest.TestCalculatorService (module)

...    warning: redefining module ExMCP.ClientBeamTransportTest.TestCalculatorService (current version defined in memory)
    │
 17 │       defmodule TestCalculatorService do
    │       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/client_beam_transport_test.exs:17: ExMCP.ClientBeamTransportTest.TestCalculatorService (module)

.    warning: redefining module ExMCP.ClientBeamTransportTest.TestCalculatorService (current version defined in memory)
    │
 17 │       defmodule TestCalculatorService do
    │       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/ex_mcp/client_beam_transport_test.exs:17: ExMCP.ClientBeamTransportTest.TestCalculatorService (module)

....................

 80) test v2 convenience functions with real servers call/4 with normalize: false returns raw response (ExMCPTest)
     test/ex_mcp_test.exs:87
     match (=) failed
     code:  assert %Response{} = result
     left:  %ExMCP.Response{}
     right: {:error,
             %ExMCP.Error{
               code: :connection_error,
               message: "Connection error: Transport not connected",
               data: nil,
               request_id: nil
             }}
     stacktrace:
       test/ex_mcp_test.exs:91: (test)



 81) test v2 convenience functions with real servers connect/2 with HTTP URL (ExMCPTest)
     test/ex_mcp_test.exs:42
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_1/1

.

 82) test error handling handles connection errors gracefully (ExMCPTest)
     test/ex_mcp_test.exs:154
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_3/1

warning: ExMCP.Transport.send_message/2 is undefined or private
└─ nofile:2: TestServerAlias.handle_call/3

warning: the following clause will never match:

    {:noreply, new_state}

because it attempts to match on the result of:

    process_request(request, state)

which has type:

    dynamic({:notification, term()} or {:response, %{...}, term()})

└─ nofile:2: TestServerAlias.handle_info/2

warning: the following clause will never match:

    {:error, reason, final_state}

because it attempts to match on the result of:

    handle_tool_call(tool_name, arguments, new_state)

which has type:

    dynamic({:ok, %{content: empty_list()}, term()})

└─ nofile:2: TestServerAlias.handle_call/3

warning: the following clause will never match:

    {:ok, content, final_state}

because it attempts to match on the result of:

    handle_resource_read(uri, full_uri, new_state)

which has type:

    dynamic({:error, binary(), term()})

└─ nofile:2: TestServerAlias.handle_call/3

warning: the following clause will never match:

    {:ok, content, new_state}

because it attempts to match on the result of:

    handle_resource_read(uri, full_uri, state)

which has type:

    dynamic({:error, binary(), term()})

└─ nofile:2: TestServerAlias.handle_call/3

warning: the following clause will never match:

    {:ok, result, final_state}

because it attempts to match on the result of:

    handle_prompt_get(prompt_name, arguments, new_state)

which has type:

    dynamic({:error, binary(), term()})

└─ nofile:2: TestServerAlias.handle_call/3

warning: the following clause will never match:

    {:error, _reason, new_state}

because it attempts to match on the result of:

    handle_request(method, params, state)

which has type:

    dynamic({:noreply, term()})

└─ nofile:2: TestServerAlias.handle_cast/2

warning: the following clause will never match:

    {:reply, _response, new_state}

because it attempts to match on the result of:

    handle_request(method, params, state)

which has type:

    dynamic({:noreply, term()})

└─ nofile:2: TestServerAlias.handle_cast/2

warning: the following clause will never match:

    {:error, reason, new_state}

because it attempts to match on the result of:

    handle_tool_call(tool_name, arguments, state)

which has type:

    dynamic({:ok, %{content: empty_list()}, term()})

└─ nofile:2: TestServerAlias.process_request/2

warning: the following clause will never match:

    {:ok, content, new_state}

because it attempts to match on the result of:

    handle_resource_read(uri, uri, state)

which has type:

    dynamic({:error, binary(), term()})

└─ nofile:2: TestServerAlias.process_request/2

warning: the following clause will never match:

    {:ok, result, new_state}

because it attempts to match on the result of:

    handle_initialize(params, state)

which has type:

    dynamic({:error, :initialize_not_implemented, term()})

└─ nofile:2: TestServerAlias.process_request/2

warning: the following clause will never match:

    {:ok, result, new_state}

because it attempts to match on the result of:

    handle_prompt_get(prompt_name, arguments, state)

which has type:

    dynamic({:error, binary(), term()})

└─ nofile:2: TestServerAlias.process_request/2

.

 83) test connection specification normalization handles transport tuples (ExMCPTest)
     test/ex_mcp_test.exs:131
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_2/1



 84) test v2 convenience functions with real servers tools/2 returns actual tool list (ExMCPTest)
     test/ex_mcp_test.exs:54
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_1/1

.

 85) test v2 convenience functions with real servers status/1 returns connection status (ExMCPTest)
     test/ex_mcp_test.exs:97
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_1/1



 86) test error handling handles invalid tool calls gracefully (ExMCPTest)
     test/ex_mcp_test.exs:166
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_3/1



 87) test v2 convenience functions with real servers connect/2 with HTTP URL and v2 client (ExMCPTest)
     test/ex_mcp_test.exs:48
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_1/1



 88) test v2 convenience functions with real servers call/4 executes tool and normalizes response (ExMCPTest)
     test/ex_mcp_test.exs:69
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_1/1



 89) test v2 convenience functions with real servers call/4 with add tool (ExMCPTest)
     test/ex_mcp_test.exs:78
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_1/1

.

 90) test connection specification normalization handles HTTP URLs (ExMCPTest)
     test/ex_mcp_test.exs:122
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_2/1



 91) test connection specification normalization client_type option selects appropriate client (ExMCPTest)
     test/ex_mcp_test.exs:138
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_2/1



 92) test v2 convenience functions with real servers disconnect/1 stops the client (ExMCPTest)
     test/ex_mcp_test.exs:107
     ** (MatchError) no match of right hand side value: {:error, {:server_not_ready, :econnrefused}}
     stacktrace:
       (ex_mcp 0.6.0) test/support/test_helpers.ex:222: ExMCP.TestHelpers.start_test_servers_for_api/1
       ExMCPTest.__ex_unit_describe_1/1

.......................................

 93) test validate_resource_parameters/1 rejects non-string resource URI (ExMCP.Authorization.ValidatorTest)
     test/ex_mcp/authorization/validator_test.exs:94
     Assertion with == failed
     code:  assert Validator.validate_resource_parameters(config) ==
              {:error, {:invalid_resource_uri, "must be a string, got: 123"}}
     left:  {:error, :invalid_resource_parameter}
     right: {:error, {:invalid_resource_uri, "must be a string, got: 123"}}
     stacktrace:
       test/ex_mcp/authorization/validator_test.exs:97: (test)

..............

 94) test server features server has notification functions (ExMCP.SimpleServerTest)
     test/ex_mcp/simple_server_test.exs:78
     Expected truthy, got false
     code: assert function_exported?(ExMCP.Server, :notify_progress, 3)
     stacktrace:
       test/ex_mcp/simple_server_test.exs:85: (test)

...................

 95) test error handling and edge cases handles unknown method requests (ExMCP.ClientTest)
     test/ex_mcp/client_test.exs:663
     ** (KeyError) key :code not found in: %{"code" => -32601, "message" => "Method not found: unknown/method"}
     code: assert error.code == -32601
     stacktrace:
       test/ex_mcp/client_test.exs:676: (test)

...........................
Finished in 49.9 seconds (37.4s async, 12.4s sync)
15 doctests, 34 properties, 1924 tests, 95 failures, 181 excluded, 12 skipped
