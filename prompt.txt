Now dive deeper into the specific DSL implementation details. Analyze the three DSL modules (Tool, Resource, Prompt) and provide concrete recommendations:

1. **API Consistency Issues**: Document exact inconsistencies between the three DSL modules
2. **Implementation Quality**: Review the macro implementations for robustness, error handling, compile-time validation
3. **Type Safety**: Assess the current type definitions and schema validation
4. **Error Messages**: Evaluate the quality of error messages and developer feedback
5. **Performance**: Any compile-time or runtime performance concerns
6. **Best Practices**: How do these DSLs compare to Phoenix, Ecto, and other well-designed Elixir DSLs?

For each issue found, provide:
- Specific code examples showing the problem
- Concrete implementation suggestions
- Priority ranking (Critical/High/Medium/Low)
- Estimated effort (Small/Medium/Large)

I want actionable recommendations I can implement immediately to improve the DSL design.